/* tests/generated/xml-binding-test.h -- generated by dsk-make-xml-binding */
/* DO NOT HAND EDIT - changes will be lost */


#ifndef DSK_H__INCLUDED
#include <dsk/dsk.h>
#endif
#include <stddef.h>
typedef struct _My__Test__A My__Test__A;
typedef struct _My__Test__B My__Test__B;
typedef struct _My__Test__C My__Test__C;


/* Enums for Unions and Enumerations */
typedef enum
{
  MY__TEST__B__TYPE__FOO,
  MY__TEST__B__TYPE__BAR,
} My__Test__B__Type;
typedef enum
{
  MY__TEST__C__TYPE__FOO,
} My__Test__C__Type;


/* Structures and Unions */
struct _My__Test__A
{
  int a;
  dsk_boolean has_b;
  int b;
  unsigned n_c;
  int *c;
  unsigned n_d;
  int *d;
};
#define my__test__a__type ((DskXmlBindingType*)(&my__test__a__descriptor))
DskXml    * my__test__a__to_xml
                      (const My__Test__A *source,
                       DskError **error);
dsk_boolean my__test__a__parse
                      (DskXml *source,
                       My__Test__A *dest,
                       DskError **error);
void        my__test__a__clear (My__Test__A *to_clear);
struct _My__Test__B
{
  My__Test__B__Type type;
  union {
    int foo;
    char* bar;
  } variant;
};
#define my__test__b__type ((DskXmlBindingType*)(&my__test__b__descriptor))
DskXml    * my__test__b__to_xml
                      (const My__Test__B *source,
                       DskError **error);
dsk_boolean my__test__b__parse
                      (DskXml *source,
                       My__Test__B *dest,
                       DskError **error);
void        my__test__b__clear (My__Test__B *to_clear);
struct _My__Test__C
{
  My__Test__C__Type type;
  union {
    struct {
      unsigned n_z;
      int *z;
      unsigned n_zz;
      char* *zz;
    } foo;
  } variant;
};
#define my__test__c__type ((DskXmlBindingType*)(&my__test__c__descriptor))
DskXml    * my__test__c__to_xml
                      (const My__Test__C *source,
                       DskError **error);
dsk_boolean my__test__c__parse
                      (DskXml *source,
                       My__Test__C *dest,
                       DskError **error);
void        my__test__c__clear (My__Test__C *to_clear);


/* Namespace Declaration */
#define my__test__namespace ((DskXmlBindingNamespace*)(&my__test__descriptor))




/* Private */
extern const DskXmlBindingNamespace my__test__descriptor;
extern const DskXmlBindingTypeStruct my__test__a__descriptor;
extern const DskXmlBindingTypeUnion my__test__b__descriptor;
extern const DskXmlBindingTypeUnion my__test__c__descriptor;
