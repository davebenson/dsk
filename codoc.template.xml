<?xml version="1.0"?>
<template>
  <subdirectory>.</subdirectory>
  <section>
    <h-filename>dsk-ctoken.h</h-filename>
    <title>dsk-ctoken.h</title>
    <blurb>recursive scanner for a C-like language</blurb>
    <enumeration>
      <name>DskCTokenType</name>
      <value>
        <name>DSK_CTOKEN_TYPE_BAREWORD</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_TOPLEVEL</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_NUMBER</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_SINGLE_QUOTED_STRING</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_OPERATOR</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_BRACE</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_BACKTICK_STRING</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_PAREN</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_DOUBLE_QUOTED_STRING</name>
      </value>
      <value>
        <name>DSK_CTOKEN_TYPE_BRACKET</name>
      </value>
    </enumeration>
    <structure>
      <name>DskCToken</name>
      <member>
        <name>parent</name>
        <type>DskCToken *</type>
      </member>
      <member>
        <name>type</name>
        <type>DskCTokenType</type>
      </member>
      <member>
        <name>token_id</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>token</name>
        <type>void *</type>
      </member>
      <member>
        <name>start_byte</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>start_line</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>n_children</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>children</name>
        <type>DskCToken *</type>
      </member>
    </structure>
    <enumeration>
      <name>DskCTokenScanFlags</name>
      <value>
        <name>DSK_CTOKEN_SCAN_FLAGS_DEFAULT</name>
      </value>
    </enumeration>
    <structure>
      <name>DskCTokenScannerConfig</name>
      <method>
        <name>scan_quoted</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>const char *</type>
          <name>str</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>end</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>n_used_out</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>token_id_opt_out</name>
        </parameter>
        <parameter>
          <type>void **</type>
          <name>token_opt_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <member>
        <name>support_backtick_strings</name>
        <type>dsk_boolean</type>
      </member>
      <method>
        <name>scan_op</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>const char *</type>
          <name>str</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>end</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>n_used_out</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>token_id_opt_out</name>
        </parameter>
        <parameter>
          <type>void **</type>
          <name>token_opt_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>scan_bareword</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>const char *</type>
          <name>str</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>end</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>n_used_out</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>token_id_opt_out</name>
        </parameter>
        <parameter>
          <type>void **</type>
          <name>token_opt_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>scan_number</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>const char *</type>
          <name>str</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>end</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>n_used_out</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>token_id_opt_out</name>
        </parameter>
        <parameter>
          <type>void **</type>
          <name>token_opt_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <member>
        <name>error_filename</name>
        <type>const char *</type>
      </member>
      <method>
        <name>destruct_data</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskCToken *</type>
          <name>token</name>
        </parameter>
      </method>
    </structure>
    <function>
      <name>dsk_ctoken_scan_str</name>
      <return-type>DskCToken *</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>end</name>
      </parameter>
      <parameter>
        <type>DskCTokenScannerConfig *</type>
        <name>config</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ctoken_destroy</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskCToken *</type>
        <name>top</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ctoken_scan_quoted__default</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>end</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>n_used_out</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>token_id_opt_out</name>
      </parameter>
      <parameter>
        <type>void **</type>
        <name>token_opt_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ctoken_scan_op__c</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>end</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>n_used_out</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>token_id_opt_out</name>
      </parameter>
      <parameter>
        <type>void **</type>
        <name>token_opt_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ctoken_scan_bareword__default</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>end</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>n_used_out</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>token_id_opt_out</name>
      </parameter>
      <parameter>
        <type>void **</type>
        <name>token_opt_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ctoken_scan_number__c</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>end</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>n_used_out</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>token_id_opt_out</name>
      </parameter>
      <parameter>
        <type>void **</type>
        <name>token_opt_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-dispatch.h</h-filename>
    <title>dsk-dispatch.h</title>
    <enumeration>
      <name>Dsk_Events</name>
      <value>
        <name>DSK_EVENT_WRITABLE</name>
      </value>
      <value>
        <name>DSK_EVENT_READABLE</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_dispatch_new</name>
      <return-type>DskDispatch *</return-type>
    </function>
    <function>
      <name>dsk_dispatch_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_default</name>
      <return-type>DskDispatch *</return-type>
    </function>
    <function-typedef>
      <name>DskFDFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>events</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_dispatch_watch_fd</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>events</name>
      </parameter>
      <parameter>
        <type>DskFDFunc</type>
        <name>callback</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_close_fd</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_fd_closed</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
    </function>
    <function-typedef>
      <name>DskTimerFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_dispatch_add_timer</name>
      <return-type>DskDispatchTimer *</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>timeout_secs</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>timeout_usecs</name>
      </parameter>
      <parameter>
        <type>DskTimerFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_add_timer_millis</name>
      <return-type>DskDispatchTimer *</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>milliseconds</name>
      </parameter>
      <parameter>
        <type>DskTimerFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_adjust_timer</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchTimer *</type>
        <name>timer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>timeout_secs</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>timeout_usecs</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_adjust_timer_millis</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchTimer *</type>
        <name>timer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>milliseconds</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_remove_timer</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchTimer *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function-typedef>
      <name>DskIdleFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_dispatch_add_idle</name>
      <return-type>DskDispatchIdle *</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>DskIdleFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_remove_idle</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchIdle *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function-typedef>
      <name>DskSignalHandler</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_dispatch_add_signal</name>
      <return-type>DskDispatchSignal *</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>signal_number</name>
      </parameter>
      <parameter>
        <type>DskSignalHandler</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_remove_signal</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchSignal *</type>
        <name>signal</name>
      </parameter>
    </function>
    <structure>
      <name>DskDispatchChildInfo</name>
      <member>
        <name>process_id</name>
        <type>int</type>
      </member>
      <member>
        <name>killed</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>value</name>
        <type>int</type>
      </member>
    </structure>
    <function-typedef>
      <name>DskChildHandler</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchChildInfo *</type>
        <name>info</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_dispatch_add_child</name>
      <return-type>DskDispatchChild *</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>process_id</name>
      </parameter>
      <parameter>
        <type>DskChildHandler</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_remove_child</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchChild *</type>
        <name>handler</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_run</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
    </function>
    <structure>
      <name>DskFileDescriptorNotify</name>
      <member>
        <name>fd</name>
        <type>DskFileDescriptor</type>
      </member>
      <member>
        <name>events</name>
        <type>Dsk_Events</type>
      </member>
    </structure>
    <structure>
      <name>DskFileDescriptorNotifyChange</name>
      <member>
        <name>fd</name>
        <type>DskFileDescriptor</type>
      </member>
      <member>
        <name>old_events</name>
        <type>Dsk_Events</type>
      </member>
      <member>
        <name>events</name>
        <type>Dsk_Events</type>
      </member>
    </structure>
    <function>
      <name>dsk_dispatch_dispatch</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>dispatch</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>n_notifies</name>
      </parameter>
      <parameter>
        <type>DskFileDescriptorNotify *</type>
        <name>notifies</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dispatch_clear_changes</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatch *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <structure>
      <name>DskDispatch</name>
      <member>
        <name>n_changes</name>
        <type>size_t</type>
      </member>
      <member>
        <name>changes</name>
        <type>DskFileDescriptorNotifyChange *</type>
      </member>
      <member>
        <name>n_notifies_desired</name>
        <type>size_t</type>
      </member>
      <member>
        <name>notifies_desired</name>
        <type>DskFileDescriptorNotify *</type>
      </member>
      <member>
        <name>has_idle</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>has_timeout</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>timeout_secs</name>
        <type>unsigned long</type>
      </member>
      <member>
        <name>timeout_usecs</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>last_dispatch_secs</name>
        <type>unsigned long</type>
      </member>
      <member>
        <name>last_dispatch_usecs</name>
        <type>unsigned</type>
      </member>
    </structure>
    <function>
      <name>dsk_dispatch_destroy_default</name>
      <return-type>void</return-type>
    </function>
  </section>
  <section>
    <h-filename>debug.h</h-filename>
    <title>debug.h</title>
  </section>
  <section>
    <h-filename>dsk-common.h</h-filename>
    <title>dsk-common.h</title>
    <function>
      <name>dsk_get_current_time</name>
      <return-type>dsk_time_t</return-type>
    </function>
    <function-typedef>
      <name>DskDestroyNotify</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>data</name>
      </parameter>
    </function-typedef>
    <enumeration>
      <name>DskIOResult</name>
      <value>
        <name>DSK_IO_RESULT_EOF</name>
      </value>
      <value>
        <name>DSK_IO_RESULT_ERROR</name>
      </value>
      <value>
        <name>DSK_IO_RESULT_AGAIN</name>
      </value>
      <value>
        <name>DSK_IO_RESULT_SUCCESS</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_error</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_warning</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_stpcpy</name>
      <return-type>char *</return-type>
      <parameter>
        <type>char *</type>
        <name>dst</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>src</name>
      </parameter>
    </function>
    <function>
      <name>dsk_die</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_malloc</name>
      <return-type>void *</return-type>
      <parameter>
        <type>size_t</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_malloc0</name>
      <return-type>void *</return-type>
      <parameter>
        <type>size_t</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_realloc</name>
      <return-type>void *</return-type>
      <parameter>
        <type>void *</type>
        <name>unnamed0</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>unnamed1</name>
      </parameter>
    </function>
    <function>
      <name>dsk_strdup</name>
      <return-type>char *</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_strndup</name>
      <return-type>char *</return-type>
      <parameter>
        <type>size_t</type>
        <name>len</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_memdup</name>
      <return-type>void *</return-type>
      <parameter>
        <type>size_t</type>
        <name>unnamed0</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>unnamed1</name>
      </parameter>
    </function>
    <function>
      <name>dsk_strdup_slice</name>
      <return-type>char *</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>end_str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_bzero_pointers</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>ptrs</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_ptrs</name>
      </parameter>
    </function>
    <function>
      <name>dsk_parse_boolean</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>dsk_boolean *</type>
        <name>out</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-mem-pool.h</h-filename>
    <title>dsk-mem-pool.h</title>
    <structure>
      <name>DskMemPool</name>
      <member>
        <name>all_chunk_list</name>
        <type>void *</type>
      </member>
      <member>
        <name>chunk</name>
        <type>char *</type>
      </member>
      <member>
        <name>chunk_left</name>
        <type>unsigned</type>
      </member>
    </structure>
    <function>
      <name>dsk_mem_pool_alloc0</name>
      <return-type>void *</return-type>
      <parameter>
        <type>DskMemPool *</type>
        <name>pool</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>size</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mem_pool_strdup</name>
      <return-type>char *</return-type>
      <parameter>
        <type>DskMemPool *</type>
        <name>pool</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mem_pool_strcut</name>
      <return-type>char *</return-type>
      <parameter>
        <type>DskMemPool *</type>
        <name>pool</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>start</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>past_end</name>
      </parameter>
    </function>
    <structure>
      <name>DskMemPoolFixed</name>
      <member>
        <name>slab_list</name>
        <type>void *</type>
      </member>
      <member>
        <name>chunk</name>
        <type>char *</type>
      </member>
      <member>
        <name>pieces_left</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>piece_size</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>free_list</name>
        <type>void *</type>
      </member>
    </structure>
    <function>
      <name>dsk_mem_pool_fixed_init</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMemPoolFixed *</type>
        <name>pool</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>size</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mem_pool_fixed_alloc</name>
      <return-type>void *</return-type>
      <parameter>
        <type>DskMemPoolFixed *</type>
        <name>pool</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mem_pool_fixed_alloc0</name>
      <return-type>void *</return-type>
      <parameter>
        <type>DskMemPoolFixed *</type>
        <name>pool</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mem_pool_fixed_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMemPoolFixed *</type>
        <name>pool</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>from_pool</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mem_pool_fixed_clear</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMemPoolFixed *</type>
        <name>pool</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mem_pool_must_alloc</name>
      <return-type>void *</return-type>
      <parameter>
        <type>DskMemPool *</type>
        <name>pool</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>size</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-http-internals.h</h-filename>
    <title>dsk-http-internals.h</title>
    <function>
      <name>_dsk_http_scan_for_end_of_header</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>checked_inout</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>permit_empty</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-xml-binding-internals.h</h-filename>
    <title>dsk-xml-binding-internals.h</title>
    <function>
      <name>_dsk_xml_binding_parse_ns_str</name>
      <return-type>DskXmlBindingNamespace *</return-type>
      <parameter>
        <type>DskXmlBinding *</type>
        <name>binding</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>path</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>ns_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>contents</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-config.h</h-filename>
    <title>dsk-config.h</title>
  </section>
  <section>
    <h-filename>dsk-url.h</h-filename>
    <title>dsk-url.h</title>
    <enumeration>
      <name>DskUrlScheme</name>
      <value>
        <name>DSK_URL_SCHEME_MAILTO</name>
      </value>
      <value>
        <name>DSK_URL_SCHEME_UNKNOWN</name>
      </value>
      <value>
        <name>DSK_URL_SCHEME_FTP</name>
      </value>
      <value>
        <name>DSK_URL_SCHEME_HTTP</name>
      </value>
      <value>
        <name>DSK_URL_SCHEME_HTTPS</name>
      </value>
      <value>
        <name>DSK_URL_SCHEME_FILE</name>
      </value>
    </enumeration>
    <structure>
      <name>DskUrlScanned</name>
      <member>
        <name>scheme_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>scheme</name>
        <type>DskUrlScheme</type>
      </member>
      <member>
        <name>username_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>password_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>host_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>port_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>port</name>
        <type>int</type>
      </member>
      <member>
        <name>path_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>query_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>fragment_start</name>
        <type>const char *</type>
      </member>
    </structure>
    <function>
      <name>dsk_url_scan</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>url_string</name>
      </parameter>
      <parameter>
        <type>DskUrlScanned *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-client-stream.h</h-filename>
    <title>dsk-client-stream.h</title>
    <structure>
      <name>DskClientStreamSourceClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetSourceClass</type>
      </member>
    </structure>
    <structure>
      <name>DskClientStreamSource</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetSource</type>
      </member>
    </structure>
    <structure>
      <name>DskClientStreamSinkClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetSinkClass</type>
      </member>
    </structure>
    <structure>
      <name>DskClientStreamSink</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetSink</type>
      </member>
    </structure>
    <structure>
      <name>DskClientStreamClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetStreamClass</type>
      </member>
    </structure>
    <structure>
      <name>DskClientStream</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetStream</type>
      </member>
      <member>
        <name>name</name>
        <type>char *</type>
      </member>
      <member>
        <name>port</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>connect_addr</name>
        <type>DskIpAddress</type>
      </member>
      <member>
        <name>fd</name>
        <type>DskFileDescriptor</type>
      </member>
      <member>
        <name>disconnect_hook</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>connect_hook</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>reconnect_timer</name>
        <type>DskDispatchTimer *</type>
      </member>
      <member>
        <name>reconnect_time_ms</name>
        <type>int</type>
      </member>
      <member>
        <name>idle_disconnect_timer</name>
        <type>DskDispatchTimer *</type>
      </member>
      <member>
        <name>idle_disconnect_time_ms</name>
        <type>int</type>
      </member>
      <member>
        <name>char</name>
        <type>unsigned</type>
      </member>
    </structure>
    <global>
      <type>extern</type>
      <name>DskClientStreamSourceClass</name>
    </global>
    <global>
      <type>extern</type>
      <name>DskClientStreamSinkClass</name>
    </global>
    <global>
      <type>extern</type>
      <name>DskClientStreamClass</name>
    </global>
    <structure>
      <name>DskClientStreamOptions</name>
      <member>
        <name>hostname</name>
        <type>const char *</type>
      </member>
      <member>
        <name>port</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>address</name>
        <type>DskIpAddress</type>
      </member>
      <member>
        <name>path</name>
        <type>const char *</type>
      </member>
      <member>
        <name>reconnect_time</name>
        <type>int</type>
      </member>
      <member>
        <name>idle_disconnect_time</name>
        <type>int</type>
      </member>
    </structure>
    <function>
      <name>dsk_client_stream_new</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskClientStreamOptions *</type>
        <name>options</name>
      </parameter>
      <parameter>
        <type>DskClientStream **</type>
        <name>stream_out</name>
      </parameter>
      <parameter>
        <type>DskOctetSink **</type>
        <name>sink_out</name>
      </parameter>
      <parameter>
        <type>DskOctetSource **</type>
        <name>source_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_client_stream_set_reconnect_time</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskClientStream *</type>
        <name>client</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>millis</name>
      </parameter>
    </function>
    <function>
      <name>dsk_client_stream_set_max_idle_time</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskClientStream *</type>
        <name>client</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>millis</name>
      </parameter>
    </function>
    <function>
      <name>dsk_client_stream_disconnect</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskClientStream *</type>
        <name>stream</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-octet-listener.h</h-filename>
    <title>dsk-octet-listener.h</title>
    <structure>
      <name>DskOctetListenerClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
      <method>
        <name>accept</name>
        <return-type>DskIOResult</return-type>
        <parameter>
          <type>DskOctetListener *</type>
          <name>listener</name>
        </parameter>
        <parameter>
          <type>DskOctetStream **</type>
          <name>stream_out</name>
        </parameter>
        <parameter>
          <type>DskOctetSource **</type>
          <name>source_out</name>
        </parameter>
        <parameter>
          <type>DskOctetSink **</type>
          <name>sink_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>shutdown</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskOctetListener *</type>
          <name>listener</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskOctetListener</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>incoming</name>
        <type>DskHook</type>
      </member>
    </structure>
    <function>
      <name>dsk_octet_listener_accept</name>
      <return-type>DskIOResult</return-type>
      <parameter>
        <type>DskOctetListener *</type>
        <name>listener</name>
      </parameter>
      <parameter>
        <type>DskOctetStream **</type>
        <name>stream_out</name>
      </parameter>
      <parameter>
        <type>DskOctetSource **</type>
        <name>source_out</name>
      </parameter>
      <parameter>
        <type>DskOctetSink **</type>
        <name>sink_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_octet_listener_shutdown</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskOctetListener *</type>
        <name>listener</name>
      </parameter>
    </function>
    <global>
      <type>extern const</type>
      <name>DskOctetListenerClass</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-dns-protocol.h</h-filename>
    <title>dsk-dns-protocol.h</title>
    <enumeration>
      <name>DskDnsSectionCode</name>
      <value>
        <name>DSK_DNS_SECTION_ALL</name>
      </value>
      <value>
        <name>DSK_DNS_SECTION_AUTHORITY</name>
      </value>
      <value>
        <name>DSK_DNS_SECTION_ANSWER</name>
      </value>
      <value>
        <name>DSK_DNS_SECTION_QUESTION</name>
      </value>
      <value>
        <name>DSK_DNS_SECTION_ADDITIONAL</name>
      </value>
    </enumeration>
    <enumeration>
      <name>DskDnsClassCode</name>
      <value>
        <name>DSK_DNS_CLASS_IN</name>
      </value>
      <value>
        <name>DSK_DNS_CLASS_ANY</name>
      </value>
    </enumeration>
    <enumeration>
      <name>DskDnsResourceRecordType</name>
      <value>
        <name>DSK_DNS_RR_START_OF_AUTHORITY</name>
      </value>
      <value>
        <name>DSK_DNS_RR_CANONICAL_NAME</name>
      </value>
      <value>
        <name>DSK_DNS_RR_HOST_ADDRESS</name>
      </value>
      <value>
        <name>DSK_DNS_RR_NAME_SERVER</name>
      </value>
      <value>
        <name>DSK_DNS_RR_WILDCARD</name>
      </value>
      <value>
        <name>DSK_DNS_RR_MAIL_EXCHANGE</name>
      </value>
      <value>
        <name>DSK_DNS_RR_WELL_KNOWN_SERVICE</name>
      </value>
      <value>
        <name>DSK_DNS_RR_POINTER</name>
      </value>
      <value>
        <name>DSK_DNS_RR_HOST_ADDRESS_IPV6</name>
      </value>
      <value>
        <name>DSK_DNS_RR_TEXT</name>
      </value>
      <value>
        <name>DSK_DNS_RR_ZONE_TRANSFER</name>
      </value>
      <value>
        <name>DSK_DNS_RR_ZONE_MAILB</name>
      </value>
      <value>
        <name>DSK_DNS_RR_HOST_INFO</name>
      </value>
    </enumeration>
    <enumeration>
      <name>DskDnsOpcode</name>
      <value>
        <name>DSK_DNS_OP_IQUERY</name>
      </value>
      <value>
        <name>DSK_DNS_OP_UPDATE</name>
      </value>
      <value>
        <name>DSK_DNS_OP_QUERY</name>
      </value>
      <value>
        <name>DSK_DNS_OP_STATUS</name>
      </value>
      <value>
        <name>DSK_DNS_OP_NOTIFY</name>
      </value>
    </enumeration>
    <structure>
      <name>DskDnsQuestion</name>
      <member>
        <name>name</name>
        <type>const char *</type>
      </member>
      <member>
        <name>query_type</name>
        <type>DskDnsResourceRecordType</type>
      </member>
      <member>
        <name>query_class</name>
        <type>DskDnsClassCode</type>
      </member>
    </structure>
    <enumeration>
      <name>DskDnsRcode</name>
      <value>
        <name>DSK_DNS_RCODE_NOERROR</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_NXRRSET</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_FORMERR</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_YXDOMAIN</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_NXDOMAIN</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_REFUSED</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_NOTZONE</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_NOTIMP</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_NOTAUTH</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_SERVFAIL</name>
      </value>
      <value>
        <name>DSK_DNS_RCODE_YXRRSET</name>
      </value>
    </enumeration>
    <structure>
      <name>DskDnsResourceRecord</name>
      <member>
        <name>type</name>
        <type>DskDnsResourceRecordType</type>
      </member>
      <member>
        <name>owner</name>
        <type>const char *</type>
      </member>
      <member>
        <name>time_to_live</name>
        <type>uint32_t</type>
      </member>
      <member>
        <name>class_code</name>
        <type>DskDnsClassCode</type>
      </member>
      <member>
        <name>result_code</name>
        <type>DskDnsRcode</type>
      </member>
      <member>
        <name>opcode</name>
        <type>DskDnsOpcode</type>
      </member>
    </structure>
    <structure>
      <name>DskDnsMessage</name>
      <member>
        <name>n_questions</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>questions</name>
        <type>DskDnsQuestion *</type>
      </member>
      <member>
        <name>n_answer_rr</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>answer_rr</name>
        <type>DskDnsResourceRecord *</type>
      </member>
      <member>
        <name>n_authority_rr</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>authority_rr</name>
        <type>DskDnsResourceRecord *</type>
      </member>
      <member>
        <name>n_additional_rr</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>additional_rr</name>
        <type>DskDnsResourceRecord *</type>
      </member>
      <member>
        <name>id</name>
        <type>uint16_t</type>
      </member>
      <member>
        <name>is_query</name>
        <type>uint16_t</type>
      </member>
      <member>
        <name>is_authoritative</name>
        <type>uint16_t</type>
      </member>
      <member>
        <name>is_truncated</name>
        <type>uint16_t</type>
      </member>
      <member>
        <name>recursion_available</name>
        <type>uint16_t</type>
      </member>
      <member>
        <name>recursion_desired</name>
        <type>uint16_t</type>
      </member>
      <member>
        <name>opcode</name>
        <type>uint8_t</type>
      </member>
      <member>
        <name>rcode</name>
        <type>uint8_t</type>
      </member>
    </structure>
    <function>
      <name>dsk_dns_message_parse</name>
      <return-type>DskDnsMessage *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dns_message_serialize</name>
      <return-type>uint8_t *</return-type>
      <parameter>
        <type>DskDnsMessage *</type>
        <name>message</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>length_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dns_message_dump</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDnsMessage *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-http-client-stream.h</h-filename>
    <title>dsk-http-client-stream.h</title>
    <structure>
      <name>DskHttpClientStreamClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpClientStream</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>sink</name>
        <type>DskOctetSink *</type>
      </member>
      <member>
        <name>write_trap</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>source</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>read_trap</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>incoming_data</name>
        <type>DskBuffer</type>
      </member>
      <member>
        <name>outgoing_data</name>
        <type>DskBuffer</type>
      </member>
      <member>
        <name>first_transfer</name>
        <type>DskHttpClientStreamTransfer *</type>
      </member>
      <member>
        <name>outgoing_data_transfer</name>
        <type>DskHttpClientStreamTransfer *</type>
      </member>
      <member>
        <name>latest_error</name>
        <type>DskError *</type>
      </member>
      <member>
        <name>error_hook</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>n_pending_outgoing_requests</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_header_size</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_pipelined_requests</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_outgoing_data</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>strict_keepalive</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>print_warnings</name>
        <type>unsigned</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpClientStreamOptions</name>
      <member>
        <name>max_header_size</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_pipelined_requests</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_outgoing_data</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>strict_keepalive</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>print_warnings</name>
        <type>dsk_boolean</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_client_stream_new</name>
      <return-type>DskHttpClientStream *</return-type>
      <parameter>
        <type>DskOctetSink *</type>
        <name>sink</name>
      </parameter>
      <parameter>
        <type>DskOctetSource *</type>
        <name>source</name>
      </parameter>
      <parameter>
        <type>const DskHttpClientStreamOptions *</type>
        <name>options</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskHttpClientStreamError</name>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_ERROR_BAD_HEADER</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_ERROR_PREMATURE_SHUTDOWN</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_ERROR_BAD_CONTENT</name>
      </value>
    </enumeration>
    <structure>
      <name>DskHttpClientStreamFuncs</name>
      <method>
        <name>handle_response</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientStreamTransfer *</type>
          <name>transfer</name>
        </parameter>
      </method>
      <method>
        <name>handle_content_complete</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientStreamTransfer *</type>
          <name>transfer</name>
        </parameter>
      </method>
      <method>
        <name>handle_error</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientStreamTransfer *</type>
          <name>transfer</name>
        </parameter>
      </method>
      <method>
        <name>destroy</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientStreamTransfer *</type>
          <name>transfer</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskHttpClientStreamRequestOptions</name>
      <member>
        <name>request_options</name>
        <type>DskHttpRequestOptions *</type>
      </member>
      <member>
        <name>request</name>
        <type>DskHttpRequest *</type>
      </member>
      <member>
        <name>post_data</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>post_data_length</name>
        <type>int64_t</type>
      </member>
      <member>
        <name>post_data_slab</name>
        <type>const uint8_t *</type>
      </member>
      <member>
        <name>gzip_compression_level</name>
        <type>int</type>
      </member>
      <member>
        <name>gzip_compress_post_data</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>post_data_is_gzipped</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>uncompress_content</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>n_cookies</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>cookies</name>
        <type>DskHttpCookie *</type>
      </member>
      <member>
        <name>funcs</name>
        <type>DskHttpClientStreamFuncs *</type>
      </member>
      <member>
        <name>user_data</name>
        <type>void *</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_client_stream_request</name>
      <return-type>DskHttpClientStreamTransfer *</return-type>
      <parameter>
        <type>DskHttpClientStream *</type>
        <name>stream</name>
      </parameter>
      <parameter>
        <type>DskHttpClientStreamRequestOptions *</type>
        <name>options</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskHttpClientStreamReadState</name>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_NEED_HEADER</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_IN_XFER_CHUNKED_HEADER</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_AFTER_XFER_CHUNKED</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_IN_XFER_CHUNKED_HEADER_EXTENSION</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_IN_XFER_CHUNK</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_AFTER_XFER_CHUNK</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_IN_BODY</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_XFER_CHUNK_TRAILER</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_IN_BODY_EOF</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_READ_DONE</name>
      </value>
    </enumeration>
    <enumeration>
      <name>DskHttpClientStreamWriteState</name>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_WRITE_CONTENT</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_WRITE_INIT</name>
      </value>
      <value>
        <name>DSK_HTTP_CLIENT_STREAM_WRITE_DONE</name>
      </value>
    </enumeration>
    <structure>
      <name>DskHttpClientStreamTransfer</name>
      <member>
        <name>owner</name>
        <type>DskHttpClientStream *</type>
      </member>
      <member>
        <name>request</name>
        <type>DskHttpRequest *</type>
      </member>
      <member>
        <name>post_data</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>response</name>
        <type>DskHttpResponse *</type>
      </member>
      <member>
        <name>content</name>
        <type>DskMemorySource *</type>
      </member>
      <member>
        <name>next</name>
        <type>DskHttpClientStreamTransfer *</type>
      </member>
      <member>
        <name>funcs</name>
        <type>DskHttpClientStreamFuncs *</type>
      </member>
      <member>
        <name>user_data</name>
        <type>void *</type>
      </member>
      <member>
        <name>failed</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>uncompress_content</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>content_decoder</name>
        <type>DskOctetFilter *</type>
      </member>
      <member>
        <name>read_state</name>
        <type>DskHttpClientStreamReadState</type>
      </member>
    </structure>
    <function-typedef>
      <name>DskHttpClientStreamConnectFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskOctetSource *</type>
        <name>source</name>
      </parameter>
      <parameter>
        <type>DskOctetSink *</type>
        <name>sink</name>
      </parameter>
      <parameter>
        <type>DskHttpResponse *</type>
        <name>response</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>data</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskHttpClientStreamConnectFail</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskError *</type>
        <name>error</name>
      </parameter>
      <parameter>
        <type>DskHttpResponse *</type>
        <name>response</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>data</name>
      </parameter>
    </function-typedef>
    <structure>
      <name>DskHttpClientStreamConnectOptions</name>
      <member>
        <name>path</name>
        <type>const char *</type>
      </member>
      <member>
        <name>host</name>
        <type>const char *</type>
      </member>
      <member>
        <name>source</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>sink</name>
        <type>DskOctetSink *</type>
      </member>
      <member>
        <name>connect_host</name>
        <type>const char *</type>
      </member>
      <member>
        <name>connect_port</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>connect_local_path</name>
        <type>const char *</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_client_stream_connect</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientStreamConnectOptions *</type>
        <name>options</name>
      </parameter>
      <parameter>
        <type>DskHttpClientStreamConnectFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>DskHttpClientStreamConnectFail</type>
        <name>fail</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>user_data</name>
      </parameter>
      <parameter>
        <type>DskDestroyNotify</type>
        <name>destroy</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-table.h</h-filename>
    <title>dsk-table.h</title>
    <structure>
      <name>DskTableBuffer</name>
      <member>
        <name>length</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>data</name>
        <type>uint8_t *</type>
      </member>
      <member>
        <name>alloced</name>
        <type>unsigned</type>
      </member>
    </structure>
    <enumeration>
      <name>DskTableMergeResult</name>
      <value>
        <name>DSK_TABLE_MERGE_RETURN_BUFFER_FINAL</name>
      </value>
      <value>
        <name>DSK_TABLE_MERGE_RETURN_BUFFER</name>
      </value>
      <value>
        <name>DSK_TABLE_MERGE_RETURN_A</name>
      </value>
      <value>
        <name>DSK_TABLE_MERGE_RETURN_B</name>
      </value>
      <value>
        <name>DSK_TABLE_MERGE_RETURN_A_FINAL</name>
      </value>
      <value>
        <name>DSK_TABLE_MERGE_RETURN_B_FINAL</name>
      </value>
    </enumeration>
    <function-typedef>
      <name>DskTableMergeFunc</name>
      <return-type>DskTableMergeResult</return-type>
      <parameter>
        <type>unsigned</type>
        <name>key_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>key_data</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>a_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>a_data</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>b_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>b_data</name>
      </parameter>
      <parameter>
        <type>DskTableBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>complete</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>merge_data</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskTableCompareFunc</name>
      <return-type>int</return-type>
      <parameter>
        <type>unsigned</type>
        <name>key_a_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>key_a_data</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>key_b_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>key_b_data</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>compare_data</name>
      </parameter>
    </function-typedef>
    <structure>
      <name>DskTableConfig</name>
      <member>
        <name>compare</name>
        <type>DskTableCompareFunc</type>
      </member>
      <member>
        <name>compare_data</name>
        <type>void *</type>
      </member>
      <member>
        <name>merge</name>
        <type>DskTableMergeFunc</type>
      </member>
      <member>
        <name>merge_data</name>
        <type>void *</type>
      </member>
      <member>
        <name>chronological_lookup_merges</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>dir</name>
        <type>const char *</type>
      </member>
      <member>
        <name>file_interface</name>
        <type>DskTableFileInterface *</type>
      </member>
      <member>
        <name>cp_interface</name>
        <type>DskTableCheckpointInterface *</type>
      </member>
      <member>
        <name>quantiles_n</name>
        <type>unsigned</type>
      </member>
    </structure>
    <function>
      <name>dsk_table_new</name>
      <return-type>DskTable *</return-type>
      <parameter>
        <type>DskTableConfig *</type>
        <name>config</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_lookup</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskTable *</type>
        <name>table</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>key_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>key_data</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>value_len_out</name>
      </parameter>
      <parameter>
        <type>const uint8_t **</type>
        <name>value_data_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_insert</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskTable *</type>
        <name>table</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>key_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>key_data</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>value_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>value_data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_destroy</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskTable *</type>
        <name>table</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_destroy_erase</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskTable *</type>
        <name>table</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_peek_dir</name>
      <return-type>const char *</return-type>
      <parameter>
        <type>DskTable *</type>
        <name>table</name>
      </parameter>
    </function>
    <structure>
      <name>DskTableReader</name>
      <member>
        <name>at_eof</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>key_length</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>value_length</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>key_data</name>
        <type>const uint8_t *</type>
      </member>
      <member>
        <name>value_data</name>
        <type>const uint8_t *</type>
      </member>
      <method>
        <name>advance</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableReader *</type>
          <name>reader</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>destroy</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskTableReader *</type>
          <name>reader</name>
        </parameter>
      </method>
    </structure>
    <function>
      <name>dsk_table_new_reader</name>
      <return-type>DskTableReader *</return-type>
      <parameter>
        <type>DskTable *</type>
        <name>table</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_reader_new_merge2</name>
      <return-type>DskTableReader *</return-type>
      <parameter>
        <type>DskTable *</type>
        <name>table</name>
      </parameter>
      <parameter>
        <type>DskTableReader *</type>
        <name>a</name>
      </parameter>
      <parameter>
        <type>DskTableReader *</type>
        <name>b</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-xml.h</h-filename>
    <title>dsk-xml.h</title>
    <enumeration>
      <name>DskXmlType</name>
      <value>
        <name>DSK_XML_ELEMENT</name>
      </value>
      <value>
        <name>DSK_XML_TEXT</name>
      </value>
      <value>
        <name>DSK_XML_COMMENT</name>
      </value>
    </enumeration>
    <structure>
      <name>DskXmlFilename</name>
      <member>
        <name>ref_count</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>filename</name>
        <type>char *</type>
      </member>
    </structure>
    <structure>
      <name>DskXml</name>
      <member>
        <name>line_no</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>filename</name>
        <type>DskXmlFilename *</type>
      </member>
      <member>
        <name>type</name>
        <type>DskXmlType</type>
      </member>
      <member>
        <name>ref_count</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>str</name>
        <type>char *</type>
      </member>
      <member>
        <name>attrs</name>
        <type>char **</type>
      </member>
      <member>
        <name>n_children</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>children</name>
        <type>DskXml **</type>
      </member>
    </structure>
    <function>
      <name>dsk_xml_ref</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>DskXml *</type>
        <name>xml</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_unref</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXml *</type>
        <name>xml</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_text_new_len</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_text_new</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_new_take_1</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>DskXml *</type>
        <name>child</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_text_child_new</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>contents</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_new_empty</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_new_take_n</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_children</name>
      </parameter>
      <parameter>
        <type>DskXml **</type>
        <name>children</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_new_take_list</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>DskXml *</type>
        <name>first_or_null</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <global>
      <type>extern</type>
      <name>DskXml</name>
    </global>
    <function>
      <name>dsk_xml_comment_new_len</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>text</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_find_attr</name>
      <return-type>const char *</return-type>
      <parameter>
        <type>const DskXml *</type>
        <name>xml</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_is_whitespace</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const DskXml *</type>
        <name>xml</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_get_all_text</name>
      <return-type>char *</return-type>
      <parameter>
        <type>const DskXml *</type>
        <name>xml</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_is_element</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const DskXml *</type>
        <name>xml</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_find_solo_child</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>DskXml *</type>
        <name>unnamed0</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_xml_new_elt_parse</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>n_attrs</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>name_kv_space</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name_and_attrs</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_children</name>
      </parameter>
      <parameter>
        <type>DskXml **</type>
        <name>children</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>condense_text_nodes</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_xml_set_position</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXml *</type>
        <name>xml</name>
      </parameter>
      <parameter>
        <type>DskXmlFilename *</type>
        <name>filename</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>line_no</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-memory.h</h-filename>
    <title>dsk-memory.h</title>
    <structure>
      <name>DskMemorySourceClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetSourceClass</type>
      </member>
    </structure>
    <structure>
      <name>DskMemorySource</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetSource</type>
      </member>
      <member>
        <name>buffer</name>
        <type>DskBuffer</type>
      </member>
      <member>
        <name>buffer_low</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>buffer_low_amount</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>error</name>
        <type>DskError *</type>
      </member>
      <member>
        <name>done_adding</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>got_shutdown</name>
        <type>unsigned</type>
      </member>
    </structure>
    <structure>
      <name>DskMemorySinkClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetSinkClass</type>
      </member>
    </structure>
    <structure>
      <name>DskMemorySink</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetSink</type>
      </member>
      <member>
        <name>buffer</name>
        <type>DskBuffer</type>
      </member>
      <member>
        <name>buffer_nonempty</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>got_shutdown</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>max_buffer_size</name>
        <type>unsigned</type>
      </member>
    </structure>
    <function>
      <name>dsk_memory_source_done_adding</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMemorySource *</type>
        <name>source</name>
      </parameter>
    </function>
    <function>
      <name>dsk_memory_source_added_data</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMemorySource *</type>
        <name>source</name>
      </parameter>
    </function>
    <function>
      <name>dsk_memory_source_add_error</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMemorySource *</type>
        <name>source</name>
      </parameter>
      <parameter>
        <type>DskError *</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_memory_source_take_error</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMemorySource *</type>
        <name>source</name>
      </parameter>
      <parameter>
        <type>DskError *</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_memory_sink_drained</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMemorySink *</type>
        <name>sink</name>
      </parameter>
    </function>
    <global>
      <type>extern</type>
      <name>DskMemorySourceClass</name>
    </global>
    <global>
      <type>extern</type>
      <name>DskMemorySinkClass</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-zlib.h</h-filename>
    <title>dsk-zlib.h</title>
    <enumeration>
      <name>DskZlibMode</name>
      <value>
        <name>DSK_ZLIB_DEFAULT</name>
      </value>
      <value>
        <name>DSK_ZLIB_GZIP</name>
      </value>
      <value>
        <name>DSK_ZLIB_RAW</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_zlib_compressor_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>DskZlibMode</type>
        <name>mode</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>level</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlib_decompressor_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>DskZlibMode</type>
        <name>mode</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-dns-client.h</h-filename>
    <title>dsk-dns-client.h</title>
    <enumeration>
      <name>DskDnsLookupResultType</name>
      <value>
        <name>DSK_DNS_LOOKUP_RESULT_FOUND</name>
      </value>
      <value>
        <name>DSK_DNS_LOOKUP_RESULT_TIMEOUT</name>
      </value>
      <value>
        <name>DSK_DNS_LOOKUP_RESULT_NOT_FOUND</name>
      </value>
      <value>
        <name>DSK_DNS_LOOKUP_RESULT_BAD_RESPONSE</name>
      </value>
    </enumeration>
    <structure>
      <name>DskDnsLookupResult</name>
      <member>
        <name>type</name>
        <type>DskDnsLookupResultType</type>
      </member>
      <member>
        <name>addr</name>
        <type>DskIpAddress *</type>
      </member>
      <member>
        <name>message</name>
        <type>const char *</type>
      </member>
    </structure>
    <function-typedef>
      <name>DskDnsLookupFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDnsLookupResult *</type>
        <name>result</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_dns_lookup</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>is_ipv6</name>
      </parameter>
      <parameter>
        <type>DskDnsLookupFunc</type>
        <name>callback</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskDnsLookupNonblockingResult</name>
      <value>
        <name>DSK_DNS_LOOKUP_NONBLOCKING_NOT_FOUND</name>
      </value>
      <value>
        <name>DSK_DNS_LOOKUP_NONBLOCKING_FOUND</name>
      </value>
      <value>
        <name>DSK_DNS_LOOKUP_NONBLOCKING_MUST_BLOCK</name>
      </value>
      <value>
        <name>DSK_DNS_LOOKUP_NONBLOCKING_ERROR</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_dns_lookup_nonblocking</name>
      <return-type>DskDnsLookupNonblockingResult</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>DskIpAddress *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>is_ipv6</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskDnsCacheEntryType</name>
      <value>
        <name>DSK_DNS_CACHE_ENTRY_IN_PROGRESS</name>
      </value>
      <value>
        <name>DSK_DNS_CACHE_ENTRY_NEGATIVE</name>
      </value>
      <value>
        <name>DSK_DNS_CACHE_ENTRY_ADDR</name>
      </value>
      <value>
        <name>DSK_DNS_CACHE_ENTRY_CNAME</name>
      </value>
      <value>
        <name>DSK_DNS_CACHE_ENTRY_ERROR</name>
      </value>
    </enumeration>
    <structure>
      <name>DskDnsCacheEntry</name>
      <member>
        <name>name</name>
        <type>char *</type>
      </member>
      <member>
        <name>is_ipv6</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>expire_time</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>type</name>
        <type>DskDnsCacheEntryType</type>
      </member>
    </structure>
    <enumeration>
      <name>DskDnsLookupFlags</name>
      <value>
        <name>DSK_DNS_LOOKUP_USE_SEARCHPATH</name>
      </value>
      <value>
        <name>DSK_DNS_LOOKUP_FOLLOW_CNAMES</name>
      </value>
    </enumeration>
    <function-typedef>
      <name>DskDnsCacheEntryFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDnsCacheEntry *</type>
        <name>entry</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_dns_lookup_cache_entry</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>is_ipv6</name>
      </parameter>
      <parameter>
        <type>DskDnsLookupFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>DskDnsCacheEntryFunc</type>
        <name>callback</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskDnsConfigFlags</name>
      <value>
        <name>DSK_DNS_CONFIG_USE_RESOLV_CONF_SEARCHPATH</name>
      </value>
      <value>
        <name>DSK_DNS_CONFIG_USE_RESOLV_CONF_NS</name>
      </value>
      <value>
        <name>DSK_DNS_CONFIG_USE_ETC_HOSTS</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_dns_client_config</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDnsConfigFlags</type>
        <name>flags</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dns_client_add_nameserver</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskIpAddress *</type>
        <name>addr</name>
      </parameter>
    </function>
    <function>
      <name>dsk_dns_config_dump</name>
      <return-type>void</return-type>
    </function>
  </section>
  <section>
    <h-filename>dsk-pattern.h</h-filename>
    <title>dsk-pattern.h</title>
    <structure>
      <name>DskPatternEntry</name>
      <member>
        <name>pattern</name>
        <type>const char *</type>
      </member>
      <member>
        <name>result</name>
        <type>void *</type>
      </member>
    </structure>
    <function>
      <name>dsk_pattern_compile</name>
      <return-type>DskPattern *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>n_entries</name>
      </parameter>
      <parameter>
        <type>DskPatternEntry *</type>
        <name>entries</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_pattern_match</name>
      <return-type>void *</return-type>
      <parameter>
        <type>DskPattern *</type>
        <name>pattern</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_pattern_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPattern *</type>
        <name>pattern</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-table-file.h</h-filename>
    <title>dsk-table-file.h</title>
    <structure>
      <name>DskTableFileWriter</name>
      <method>
        <name>write</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableFileWriter *</type>
          <name>writer</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>key_length</name>
        </parameter>
        <parameter>
          <type>const uint8_t *</type>
          <name>key_data</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>value_length</name>
        </parameter>
        <parameter>
          <type>const uint8_t *</type>
          <name>value_data</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>close</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableFileWriter *</type>
          <name>writer</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>destroy</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskTableFileWriter *</type>
          <name>writer</name>
        </parameter>
      </method>
    </structure>
    <function-typedef>
      <name>DskTableSeekerFindFunc</name>
      <return-type>int</return-type>
      <parameter>
        <type>unsigned</type>
        <name>key_len</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>key_data</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>user_data</name>
      </parameter>
    </function-typedef>
    <enumeration>
      <name>DskTableFileFindMode</name>
      <value>
        <name>DSK_TABLE_FILE_FIND_ANY</name>
      </value>
      <value>
        <name>DSK_TABLE_FILE_FIND_FIRST</name>
      </value>
      <value>
        <name>DSK_TABLE_FILE_FIND_LAST</name>
      </value>
    </enumeration>
    <structure>
      <name>DskTableFileSeeker</name>
      <method>
        <name>find</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableFileSeeker *</type>
          <name>seeker</name>
        </parameter>
        <parameter>
          <type>DskTableSeekerFindFunc</type>
          <name>func</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
        <parameter>
          <type>DskTableFileFindMode</type>
          <name>mode</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>key_len_out</name>
        </parameter>
        <parameter>
          <type>const uint8_t **</type>
          <name>key_data_out</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>value_len_out</name>
        </parameter>
        <parameter>
          <type>const uint8_t **</type>
          <name>value_data_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>find_reader</name>
        <return-type>DskTableReader *</return-type>
        <parameter>
          <type>DskTableFileSeeker *</type>
          <name>seeker</name>
        </parameter>
        <parameter>
          <type>DskTableSeekerFindFunc</type>
          <name>func</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>index</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableFileSeeker *</type>
          <name>seeker</name>
        </parameter>
        <parameter>
          <type>uint64_t</type>
          <name>index</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>key_len_out</name>
        </parameter>
        <parameter>
          <type>const void **</type>
          <name>key_data_out</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>value_len_out</name>
        </parameter>
        <parameter>
          <type>const void **</type>
          <name>value_data_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>index_reader</name>
        <return-type>DskTableReader *</return-type>
        <parameter>
          <type>DskTableFileSeeker *</type>
          <name>seeker</name>
        </parameter>
        <parameter>
          <type>uint64_t</type>
          <name>index</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>destroy</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskTableFileSeeker *</type>
          <name>seeker</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskTableFileInterface</name>
      <method>
        <name>new_writer</name>
        <return-type>DskTableFileWriter *</return-type>
        <parameter>
          <type>DskTableFileInterface *</type>
          <name>iface</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>openat_dir</name>
        </parameter>
        <parameter>
          <type>int</type>
          <name>openat_fd</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>base_filename</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>new_reader</name>
        <return-type>DskTableReader *</return-type>
        <parameter>
          <type>DskTableFileInterface *</type>
          <name>iface</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>openat_dir</name>
        </parameter>
        <parameter>
          <type>int</type>
          <name>openat_fd</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>base_filename</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>new_seeker</name>
        <return-type>DskTableFileSeeker *</return-type>
        <parameter>
          <type>DskTableFileInterface *</type>
          <name>iface</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>openat_dir</name>
        </parameter>
        <parameter>
          <type>int</type>
          <name>openat_fd</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>base_filename</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>delete_file</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableFileInterface *</type>
          <name>iface</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>openat_dir</name>
        </parameter>
        <parameter>
          <type>int</type>
          <name>openat_fd</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>base_filename</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>destroy</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskTableFileInterface *</type>
          <name>iface</name>
        </parameter>
      </method>
    </structure>
    <global>
      <type>extern</type>
      <name>DskTableFileInterface</name>
    </global>
    <function>
      <name>dsk_table_file_interface_new</name>
      <return-type>DskTableFileInterface *</return-type>
      <parameter>
        <type>DskTableFileCompressor *</type>
        <name>unnamed0</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_index_levels</name>
      </parameter>
      <parameter>
        <type>const unsigned *</type>
        <name>fanouts</name>
      </parameter>
    </function>
    <structure>
      <name>DskTableFileCompressor</name>
      <method>
        <name>compress</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableFileCompressor *</type>
          <name>compressor</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>in_len</name>
        </parameter>
        <parameter>
          <type>const uint8_t *</type>
          <name>in_data</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>out_len_inout</name>
        </parameter>
        <parameter>
          <type>uint8_t *</type>
          <name>out_data</name>
        </parameter>
      </method>
      <method>
        <name>decompress</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableFileCompressor *</type>
          <name>compressor</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>in_len</name>
        </parameter>
        <parameter>
          <type>const uint8_t *</type>
          <name>in_data</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>out_len_inout</name>
        </parameter>
        <parameter>
          <type>uint8_t *</type>
          <name>out_data</name>
        </parameter>
      </method>
    </structure>
  </section>
  <section>
    <h-filename>dsk-mime.h</h-filename>
    <title>dsk-mime.h</title>
    <structure>
      <name>DskMimeKeyValueInplace</name>
      <member>
        <name>key_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>value_start</name>
        <type>const char *</type>
      </member>
    </structure>
    <function>
      <name>dsk_mime_key_values_scan</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>max_kv</name>
      </parameter>
      <parameter>
        <type>DskMimeKeyValueInplace *</type>
        <name>kv</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>n_kv_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <structure>
      <name>DskMimeContentDisposition</name>
      <member>
        <name>is_inline</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>filename_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>filename_end</name>
        <type>const char *</type>
      </member>
      <member>
        <name>name_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>name_end</name>
        <type>const char *</type>
      </member>
      <member>
        <name>id_start</name>
        <type>const char *</type>
      </member>
      <member>
        <name>id_end</name>
        <type>const char *</type>
      </member>
    </structure>
    <function>
      <name>dsk_parse_mime_content_disposition_header</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>line</name>
      </parameter>
      <parameter>
        <type>DskMimeContentDisposition *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-cmdline.h</h-filename>
    <title>dsk-cmdline.h</title>
    <enumeration>
      <name>DskCmdlineInitFlags</name>
      <value>
        <name>DSK_CMDLINE_PERMIT_ARGUMENTS</name>
      </value>
      <value>
        <name>DSK_CMDLINE_PERMIT_UNKNOWN_OPTIONS</name>
      </value>
    </enumeration>
    <enumeration>
      <name>DskCmdlineFlags</name>
      <value>
        <name>DSK_CMDLINE_REVERSED</name>
      </value>
      <value>
        <name>DSK_CMDLINE_MANDATORY</name>
      </value>
      <value>
        <name>DSK_CMDLINE_PRINT_DEFAULT</name>
      </value>
      <value>
        <name>DSK_CMDLINE_REPEATABLE</name>
      </value>
      <value>
        <name>DSK_CMDLINE_OPTIONAL</name>
      </value>
      <value>
        <name>DSK_CMDLINE_TAKES_ARGUMENT</name>
      </value>
      <value>
        <name>_DSK_CMDLINE_IS_FOUR_BYTES</name>
      </value>
    </enumeration>
    <function-typedef>
      <name>DskCmdlineCallback</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>arg_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>arg_value</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_cmdline_init</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>static_short_desc</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>long_desc</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>non_option_arg_desc</name>
      </parameter>
      <parameter>
        <type>DskCmdlineInitFlags</type>
        <name>flags</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_add_int</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>static_option_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_description</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_arg_description</name>
      </parameter>
      <parameter>
        <type>DskCmdlineFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>int *</type>
        <name>value_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_add_uint</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>static_option_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_description</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_arg_description</name>
      </parameter>
      <parameter>
        <type>DskCmdlineFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>value_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_add_double</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>static_option_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_description</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_arg_description</name>
      </parameter>
      <parameter>
        <type>DskCmdlineFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>double *</type>
        <name>value_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_add_boolean</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>static_option_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_description</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_arg_description</name>
      </parameter>
      <parameter>
        <type>DskCmdlineFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>dsk_boolean *</type>
        <name>value_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_add_string</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>static_option_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_description</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_arg_description</name>
      </parameter>
      <parameter>
        <type>DskCmdlineFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>char **</type>
        <name>value_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_add_func</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>static_option_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_description</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>static_arg_description</name>
      </parameter>
      <parameter>
        <type>DskCmdlineFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>DskCmdlineCallback</type>
        <name>callback</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_permit_unknown_options</name>
      <return-type>void</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>permit</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_permit_extra_arguments</name>
      <return-type>void</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>permit</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_process_args</name>
      <return-type>void</return-type>
      <parameter>
        <type>int *</type>
        <name>argc_inout</name>
      </parameter>
      <parameter>
        <type>char ***</type>
        <name>argv_inout</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cmdline_try_process_args</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>int *</type>
        <name>argc_inout</name>
      </parameter>
      <parameter>
        <type>char ***</type>
        <name>argv_inout</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_cmdline_cleanup</name>
      <return-type>void</return-type>
    </function>
    <function>
      <name>dsk_cmdline_add_shortcut</name>
      <return-type>void</return-type>
      <parameter>
        <type>char</type>
        <name>shortcut</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>option_name</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-ascii.h</h-filename>
    <title>dsk-ascii.h</title>
    <global>
      <type>extern</type>
      <name>unsigned</name>
    </global>
    <function>
      <name>dsk_ascii_xdigit_value</name>
      <return-type>int</return-type>
      <parameter>
        <type>int</type>
        <name>c</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ascii_digit_value</name>
      <return-type>int</return-type>
      <parameter>
        <type>int</type>
        <name>c</name>
      </parameter>
    </function>
    <global>
      <type>extern</type>
      <name>char</name>
    </global>
    <function>
      <name>dsk_ascii_byte_name</name>
      <return-type>const char *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>char</name>
      </parameter>
      <parameter>
        <type>byte</type>
        <name>unnamed1</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ascii_strcasecmp</name>
      <return-type>int</return-type>
      <parameter>
        <type>const char *</type>
        <name>a</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>b</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ascii_strncasecmp</name>
      <return-type>int</return-type>
      <parameter>
        <type>const char *</type>
        <name>a</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>b</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>max_len</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ascii_strchomp</name>
      <return-type>void</return-type>
      <parameter>
        <type>char *</type>
        <name>chomp</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-main.h</h-filename>
    <title>dsk-main.h</title>
    <function>
      <name>dsk_main_watch_fd</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>events</name>
      </parameter>
      <parameter>
        <type>DskFDFunc</type>
        <name>callback</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_close_fd</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_fd_closed</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_add_timer</name>
      <return-type>DskDispatchTimer *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>timeout_secs</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>timeout_usecs</name>
      </parameter>
      <parameter>
        <type>DskTimerFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_add_timer_millis</name>
      <return-type>DskDispatchTimer *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>milliseconds</name>
      </parameter>
      <parameter>
        <type>DskTimerFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_adjust_timer</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchTimer *</type>
        <name>timer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>timeout_secs</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>timeout_usecs</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_adjust_timer_millis</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchTimer *</type>
        <name>timer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>milliseconds</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_remove_timer</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchTimer *</type>
        <name>timer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_add_idle</name>
      <return-type>DskDispatchIdle *</return-type>
      <parameter>
        <type>DskIdleFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_remove_idle</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchIdle *</type>
        <name>idle</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_add_signal</name>
      <return-type>DskDispatchSignal *</return-type>
      <parameter>
        <type>int</type>
        <name>signal_number</name>
      </parameter>
      <parameter>
        <type>DskSignalHandler</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_remove_signal</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchSignal *</type>
        <name>signal</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_add_child</name>
      <return-type>DskDispatchChild *</return-type>
      <parameter>
        <type>int</type>
        <name>process_id</name>
      </parameter>
      <parameter>
        <type>DskChildHandler</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_remove_child</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDispatchChild *</type>
        <name>handler</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_add_object</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_add_ref</name>
      <return-type>void</return-type>
    </function>
    <function>
      <name>dsk_main_remove_ref</name>
      <return-type>void</return-type>
    </function>
    <function>
      <name>dsk_main_run</name>
      <return-type>int</return-type>
    </function>
    <function>
      <name>dsk_main_exit</name>
      <return-type>void</return-type>
      <parameter>
        <type>int</type>
        <name>exit_status</name>
      </parameter>
    </function>
    <function>
      <name>dsk_main_quit</name>
      <return-type>void</return-type>
    </function>
  </section>
  <section>
    <h-filename>gskrbtreemacros.h</h-filename>
    <title>gskrbtreemacros.h</title>
  </section>
  <section>
    <h-filename>dsk-buffer.h</h-filename>
    <title>dsk-buffer.h</title>
    <structure>
      <name>DskBufferFragment</name>
      <member>
        <name>next</name>
        <type>DskBufferFragment *</type>
      </member>
      <member>
        <name>buf</name>
        <type>uint8_t *</type>
      </member>
      <member>
        <name>buf_max_size</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>buf_start</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>buf_length</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>is_foreign</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>destroy</name>
        <type>DskDestroyNotify</type>
      </member>
      <member>
        <name>destroy_data</name>
        <type>void *</type>
      </member>
    </structure>
    <structure>
      <name>DskBuffer</name>
      <member>
        <name>size</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>first_frag</name>
        <type>DskBufferFragment *</type>
      </member>
      <member>
        <name>last_frag</name>
        <type>DskBufferFragment *</type>
      </member>
    </structure>
    <function>
      <name>dsk_buffer_init</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_read</name>
      <return-type>unsigned</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>max_length</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_peek</name>
      <return-type>unsigned</return-type>
      <parameter>
        <type>const DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>max_length</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_discard</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>max_discard</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_read_line</name>
      <return-type>char *</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_parse_string0</name>
      <return-type>char *</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_peek_byte</name>
      <return-type>int</return-type>
      <parameter>
        <type>const DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_read_byte</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_byte_at</name>
      <return-type>uint8_t</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>index</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_last_byte</name>
      <return-type>uint8_t</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_append</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_append_string</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>string</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_append_byte_f</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>uint8_t</type>
        <name>byte</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_append_repeated_byte</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>count</name>
      </parameter>
      <parameter>
        <type>uint8_t</type>
        <name>byte</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_append_string0</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>string</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_append_foreign</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskDestroyNotify</type>
        <name>destroy</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>destroy_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_printf</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_vprintf</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>va_list</type>
        <name>args</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_get_last_byte</name>
      <return-type>uint8_t</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_get_byte_at</name>
      <return-type>uint8_t</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>idx</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_drain</name>
      <return-type>unsigned</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>dst</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>src</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_transfer</name>
      <return-type>unsigned</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>dst</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>src</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>max_transfer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_writev</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>read_from</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>fd</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_readv</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>write_to</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>fd</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_clear</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>to_destroy</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_clear_to_string</name>
      <return-type>char *</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_find_fragment</name>
      <return-type>DskBufferFragment *</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>offset</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>frag_offset_out</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_buffer_cleanup_recycling_bin</name>
      <return-type>void</return-type>
    </function>
    <function>
      <name>dsk_buffer_index_of</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>char</type>
        <name>char_to_find</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_fragment_peek</name>
      <return-type>unsigned</return-type>
      <parameter>
        <type>DskBufferFragment *</type>
        <name>fragment</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>offset</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>buf</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_fragment_advance</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskBufferFragment **</type>
        <name>frag_inout</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>offset_inout</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>skip</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_append_empty_fragment</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_maybe_remove_empty_fragment</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_buffer_fragment_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskBufferFragment *</type>
        <name>fragment</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-http-protocol.h</h-filename>
    <title>dsk-http-protocol.h</title>
    <enumeration>
      <name>DskHttpStatus</name>
      <value>
        <name>DSK_HTTP_STATUS_BAD_GATEWAY</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_REQUEST_TIMEOUT</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_MULTIPLE_CHOICES</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_UNAUTHORIZED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_EXPECTATION_FAILED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_SWITCHING_PROTOCOLS</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_USE_PROXY</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_RESET_CONTENT</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_BAD_RANGE</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_CREATED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_PARTIAL_CONTENT</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_METHOD_NOT_ALLOWED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_UNSUPPORTED_MEDIA</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_BAD_REQUEST</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_PAYMENT_REQUIRED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_INTERNAL_SERVER_ERROR</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_GATEWAY_TIMEOUT</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_CONFLICT</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_NONAUTHORITATIVE_INFO</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_NOT_ACCEPTABLE</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_NOT_IMPLEMENTED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_FOUND</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_OK</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_SERVICE_UNAVAILABLE</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_TEMPORARY_REDIRECT</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_CONTINUE</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_FORBIDDEN</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_URI_TOO_LARGE</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_ENTITY_TOO_LARGE</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_PROXY_AUTH_REQUIRED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_SEE_OTHER</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_ACCEPTED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_NOT_FOUND</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_PRECONDITION_FAILED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_NO_CONTENT</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_MOVED_PERMANENTLY</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_NOT_MODIFIED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_GONE</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_LENGTH_REQUIRED</name>
      </value>
      <value>
        <name>DSK_HTTP_STATUS_UNSUPPORTED_VERSION</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_http_status_get_message</name>
      <return-type>const char *</return-type>
      <parameter>
        <type>DskHttpStatus</type>
        <name>status_code</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskHttpVerb</name>
      <value>
        <name>DSK_HTTP_VERB_CONNECT</name>
      </value>
      <value>
        <name>DSK_HTTP_VERB_HEAD</name>
      </value>
      <value>
        <name>DSK_HTTP_VERB_TRACE</name>
      </value>
      <value>
        <name>DSK_HTTP_VERB_PUT</name>
      </value>
      <value>
        <name>DSK_HTTP_VERB_GET</name>
      </value>
      <value>
        <name>DSK_HTTP_VERB_POST</name>
      </value>
      <value>
        <name>DSK_HTTP_VERB_OPTIONS</name>
      </value>
      <value>
        <name>DSK_HTTP_VERB_DELETE</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_http_verb_name</name>
      <return-type>const char *</return-type>
      <parameter>
        <type>DskHttpVerb</type>
        <name>verb</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_has_response_body</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskHttpVerb</type>
        <name>request_verb</name>
      </parameter>
      <parameter>
        <type>DskHttpStatus</type>
        <name>response_status_code</name>
      </parameter>
    </function>
    <structure>
      <name>DskHttpCookie</name>
      <member>
        <name>key</name>
        <type>const char *</type>
      </member>
      <member>
        <name>value</name>
        <type>const char *</type>
      </member>
      <member>
        <name>domain</name>
        <type>const char *</type>
      </member>
      <member>
        <name>path</name>
        <type>const char *</type>
      </member>
      <member>
        <name>expire_date</name>
        <type>const char *</type>
      </member>
      <member>
        <name>comment</name>
        <type>const char *</type>
      </member>
      <member>
        <name>max_age</name>
        <type>int</type>
      </member>
      <member>
        <name>secure</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>version</name>
        <type>unsigned</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpHeaderMisc</name>
      <member>
        <name>key</name>
        <type>char *</type>
      </member>
      <member>
        <name>value</name>
        <type>char *</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpRequestClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpRequest</name>
      <member>
        <name>base_object</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>verb</name>
        <type>DskHttpVerb</type>
      </member>
      <member>
        <name>path</name>
        <type>char *</type>
      </member>
      <member>
        <name>char</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>transfer_encoding_chunked</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>has_date</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>connection_close</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>content_encoding_gzip</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>supports_content_encoding_gzip</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>content_type</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_type_kv_pairs</name>
        <type>char **</type>
      </member>
      <member>
        <name>date</name>
        <type>dsk_time_t</type>
      </member>
      <member>
        <name>content_length</name>
        <type>int64_t</type>
      </member>
      <member>
        <name>host</name>
        <type>char *</type>
      </member>
      <member>
        <name>user_agent</name>
        <type>char *</type>
      </member>
      <member>
        <name>referrer</name>
        <type>char *</type>
      </member>
      <member>
        <name>n_unparsed_headers</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>unparsed_headers</name>
        <type>DskHttpHeaderMisc *</type>
      </member>
      <member>
        <name>_slab</name>
        <type>char *</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpResponseClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpResponse</name>
      <member>
        <name>base_object</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>http_major_version</name>
        <type>uint8_t</type>
      </member>
      <member>
        <name>http_minor_version</name>
        <type>uint8_t</type>
      </member>
      <member>
        <name>status_code</name>
        <type>DskHttpStatus</type>
      </member>
      <member>
        <name>connection_close</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>transfer_encoding_chunked</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>accept_ranges</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>has_date</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>content_encoding_gzip</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>has_last_modified</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>has_expires</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>content_type</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_type_kv_pairs</name>
        <type>char **</type>
      </member>
      <member>
        <name>date</name>
        <type>dsk_time_t</type>
      </member>
      <member>
        <name>content_length</name>
        <type>dsk_time_t</type>
      </member>
      <member>
        <name>n_unparsed_headers</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>unparsed_headers</name>
        <type>DskHttpHeaderMisc *</type>
      </member>
      <member>
        <name>has_md5sum</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>char</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>location</name>
        <type>char *</type>
      </member>
      <member>
        <name>expires</name>
        <type>dsk_time_t</type>
      </member>
      <member>
        <name>last_modified</name>
        <type>dsk_time_t</type>
      </member>
      <member>
        <name>server</name>
        <type>char *</type>
      </member>
      <member>
        <name>_slab</name>
        <type>char *</type>
      </member>
    </structure>
    <global>
      <type>extern</type>
      <name>DskHttpRequestClass</name>
    </global>
    <global>
      <type>extern</type>
      <name>DskHttpResponseClass</name>
    </global>
    <function>
      <name>dsk_http_request_parse_buffer</name>
      <return-type>DskHttpRequest *</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>header_len</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_response_parse_buffer</name>
      <return-type>DskHttpResponse *</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>header_len</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_request_print_buffer</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_response_print_buffer</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpResponse *</type>
        <name>response</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <structure>
      <name>DskHttpRequestOptions</name>
      <member>
        <name>verb</name>
        <type>DskHttpVerb</type>
      </member>
      <member>
        <name>http_major_version</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>http_minor_version</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>full_path</name>
        <type>char *</type>
      </member>
      <member>
        <name>path</name>
        <type>char *</type>
      </member>
      <member>
        <name>query</name>
        <type>char *</type>
      </member>
      <member>
        <name>host</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_type</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_main_type</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_sub_type</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_charset</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_type_kv_pairs</name>
        <type>char **</type>
      </member>
      <member>
        <name>content_length</name>
        <type>int64_t</type>
      </member>
      <member>
        <name>content_encoding_gzip</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>transfer_encoding_chunked</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>has_date</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>date</name>
        <type>dsk_time_t</type>
      </member>
      <member>
        <name>referrer</name>
        <type>char *</type>
      </member>
      <member>
        <name>user_agent</name>
        <type>char *</type>
      </member>
      <member>
        <name>n_unparsed_headers</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>unparsed_headers</name>
        <type>char **</type>
      </member>
      <member>
        <name>unparsed_misc_headers</name>
        <type>DskHttpHeaderMisc *</type>
      </member>
      <member>
        <name>parsed</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>parsed_transfer_encoding_chunked</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>parsed_connection_close</name>
        <type>dsk_boolean</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_request_new</name>
      <return-type>DskHttpRequest *</return-type>
      <parameter>
        <type>DskHttpRequestOptions *</type>
        <name>options</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_request_init_options</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>DskHttpRequestOptions *</type>
        <name>out</name>
      </parameter>
    </function>
    <structure>
      <name>DskHttpResponseOptions</name>
      <member>
        <name>request</name>
        <type>DskHttpRequest *</type>
      </member>
      <member>
        <name>status_code</name>
        <type>DskHttpStatus</type>
      </member>
      <member>
        <name>http_major_version</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>http_minor_version</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>connection_close</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>content_type</name>
        <type>const char *</type>
      </member>
      <member>
        <name>content_main_type</name>
        <type>const char *</type>
      </member>
      <member>
        <name>content_sub_type</name>
        <type>const char *</type>
      </member>
      <member>
        <name>content_charset</name>
        <type>const char *</type>
      </member>
      <member>
        <name>content_type_kv_pairs</name>
        <type>char **</type>
      </member>
      <member>
        <name>content_length</name>
        <type>int64_t</type>
      </member>
      <member>
        <name>content_encoding_gzip</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>has_date</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>date</name>
        <type>dsk_time_t</type>
      </member>
      <member>
        <name>has_expires</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>expires</name>
        <type>dsk_time_t</type>
      </member>
      <member>
        <name>server</name>
        <type>char *</type>
      </member>
      <member>
        <name>location</name>
        <type>char *</type>
      </member>
      <member>
        <name>n_unparsed_headers</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>unparsed_headers</name>
        <type>char **</type>
      </member>
      <member>
        <name>unparsed_misc_headers</name>
        <type>DskHttpHeaderMisc *</type>
      </member>
      <member>
        <name>parsed</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>parsed_transfer_encoding_chunked</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>parsed_connection_close</name>
        <type>dsk_boolean</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_response_new</name>
      <return-type>DskHttpResponse *</return-type>
      <parameter>
        <type>DskHttpResponseOptions *</type>
        <name>options</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-checksum.h</h-filename>
    <title>dsk-checksum.h</title>
    <enumeration>
      <name>DskChecksumType</name>
      <value>
        <name>DSK_CHECKSUM_SHA256</name>
      </value>
      <value>
        <name>DSK_CHECKSUM_CRC32_BIG_ENDIAN</name>
      </value>
      <value>
        <name>DSK_CHECKSUM_SHA1</name>
      </value>
      <value>
        <name>DSK_CHECKSUM_CRC32_LITTLE_ENDIAN</name>
      </value>
      <value>
        <name>DSK_CHECKSUM_MD5</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_checksum_new</name>
      <return-type>DskChecksum *</return-type>
      <parameter>
        <type>DskChecksumType</type>
        <name>type</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_destroy</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskChecksum *</type>
        <name>checksum</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_feed</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskChecksum *</type>
        <name>hash</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_feed_str</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskChecksum *</type>
        <name>checksum</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_done</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskChecksum *</type>
        <name>checksum</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_get_size</name>
      <return-type>size_t</return-type>
      <parameter>
        <type>DskChecksum *</type>
        <name>checksum</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_get</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskChecksum *</type>
        <name>checksum</name>
      </parameter>
      <parameter>
        <type>uint8_t *</type>
        <name>data_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_get_hex</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskChecksum *</type>
        <name>checksum</name>
      </parameter>
      <parameter>
        <type>char *</type>
        <name>hex_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_type_get_size</name>
      <return-type>size_t</return-type>
      <parameter>
        <type>DskChecksumType</type>
        <name>checksum</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_type_get_instance_size</name>
      <return-type>size_t</return-type>
      <parameter>
        <type>DskChecksumType</type>
        <name>type</name>
      </parameter>
    </function>
    <function>
      <name>dsk_checksum_init</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>checksum_instance</name>
      </parameter>
      <parameter>
        <type>DskChecksumType</type>
        <name>type</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-print.h</h-filename>
    <title>dsk-print.h</title>
    <function-typedef>
      <name>DskPrintAppendFunc</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>append_data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_print_new</name>
      <return-type>DskPrint *</return-type>
      <parameter>
        <type>DskPrintAppendFunc</type>
        <name>append</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>append_data</name>
      </parameter>
      <parameter>
        <type>DskDestroyNotify</type>
        <name>append_data_destroy</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>print</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_new_fp</name>
      <return-type>DskPrint *</return-type>
      <parameter>
        <type>void *</type>
        <name>file_pointer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_new_fp_fclose</name>
      <return-type>DskPrint *</return-type>
      <parameter>
        <type>void *</type>
        <name>file_pointer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_new_fp_pclose</name>
      <return-type>DskPrint *</return-type>
      <parameter>
        <type>void *</type>
        <name>file_pointer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_new_buffer</name>
      <return-type>DskPrint *</return-type>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_string</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>value</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_int</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>value</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_uint</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>value</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_int64</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>int64_t</type>
        <name>value</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_uint64</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>uint64_t</type>
        <name>value</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_template_string</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>template_string</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_buffer</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>buffer</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_push</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_pop</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>template_string</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_filtered_string</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>raw_string</name>
      </parameter>
      <parameter>
        <type>DskOctetFilter *</type>
        <name>filter</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_filtered_binary</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>raw_string_length</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>raw_string</name>
      </parameter>
      <parameter>
        <type>DskOctetFilter *</type>
        <name>filter</name>
      </parameter>
    </function>
    <function>
      <name>dsk_print_set_filtered_buffer</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskPrint *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>variable_name</name>
      </parameter>
      <parameter>
        <type>const DskBuffer *</type>
        <name>buffer</name>
      </parameter>
      <parameter>
        <type>DskOctetFilter *</type>
        <name>filter</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-table-checkpoint.h</h-filename>
    <title>dsk-table-checkpoint.h</title>
    <function-typedef>
      <name>DskTableCheckpointReplayFunc</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>unsigned</type>
        <name>key_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>key_data</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>value_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>value_data</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>replay_data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function-typedef>
    <structure>
      <name>DskTableCheckpointInterface</name>
      <method>
        <name>create</name>
        <return-type>DskTableCheckpoint *</return-type>
        <parameter>
          <type>DskTableCheckpointInterface *</type>
          <name>iface</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>openat_dir</name>
        </parameter>
        <parameter>
          <type>int</type>
          <name>openat_fd</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>basename</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>cp_data_len</name>
        </parameter>
        <parameter>
          <type>const uint8_t *</type>
          <name>cp_data</name>
        </parameter>
        <parameter>
          <type>DskTableCheckpoint *</type>
          <name>prior</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>open</name>
        <return-type>DskTableCheckpoint *</return-type>
        <parameter>
          <type>DskTableCheckpointInterface *</type>
          <name>iface</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>openat_dir</name>
        </parameter>
        <parameter>
          <type>int</type>
          <name>openat_fd</name>
        </parameter>
        <parameter>
          <type>const char *</type>
          <name>basename</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>cp_data_len_out</name>
        </parameter>
        <parameter>
          <type>uint8_t **</type>
          <name>cp_data_out</name>
        </parameter>
        <parameter>
          <type>DskTableCheckpointReplayFunc</type>
          <name>func</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskTableCheckpoint</name>
      <method>
        <name>add</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableCheckpoint *</type>
          <name>cp</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>key_length</name>
        </parameter>
        <parameter>
          <type>const uint8_t *</type>
          <name>key_data</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>value_length</name>
        </parameter>
        <parameter>
          <type>const uint8_t *</type>
          <name>value_data</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>sync</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableCheckpoint *</type>
          <name>cp</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>close</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskTableCheckpoint *</type>
          <name>cp</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>destroy</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskTableCheckpoint *</type>
          <name>cp</name>
        </parameter>
      </method>
    </structure>
    <global>
      <type>extern</type>
      <name>DskTableCheckpointInterface</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-xml-parser.h</h-filename>
    <title>dsk-xml-parser.h</title>
    <structure>
      <name>DskXmlParserNamespaceConfig</name>
      <member>
        <name>url</name>
        <type>char *</type>
      </member>
      <member>
        <name>prefix</name>
        <type>char *</type>
      </member>
    </structure>
    <enumeration>
      <name>DskXmlParserFlags</name>
      <value>
        <name>DSK_XML_PARSER_SUPPRESS_WHITESPACE</name>
      </value>
      <value>
        <name>DSK_XML_PARSER_INCLUDE_COMMENTS</name>
      </value>
      <value>
        <name>DSK_XML_PARSER_IGNORE_NS</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_xml_parser_config_new</name>
      <return-type>DskXmlParserConfig *</return-type>
      <parameter>
        <type>DskXmlParserFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_ns</name>
      </parameter>
      <parameter>
        <type>const DskXmlParserNamespaceConfig *</type>
        <name>ns</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_xmlpaths</name>
      </parameter>
      <parameter>
        <type>char **</type>
        <name>xmlpaths</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_parser_config_new_simple</name>
      <return-type>DskXmlParserConfig *</return-type>
      <parameter>
        <type>DskXmlParserFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>path</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_parser_config_destroy</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXmlParserConfig *</type>
        <name>config</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_parser_new</name>
      <return-type>DskXmlParser *</return-type>
      <parameter>
        <type>DskXmlParserConfig *</type>
        <name>config</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>display_filename</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_parser_pop</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>DskXmlParser *</type>
        <name>parser</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>xmlpath_index_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_parser_feed</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskXmlParser *</type>
        <name>parser</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_parser_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXmlParser *</type>
        <name>parser</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-octet-fd.h</h-filename>
    <title>dsk-octet-fd.h</title>
    <function>
      <name>dsk_octet_source_new_stdin</name>
      <return-type>DskOctetSource *</return-type>
    </function>
    <function>
      <name>dsk_octet_sink_new_stdout</name>
      <return-type>DskOctetSink *</return-type>
    </function>
    <structure>
      <name>DskOctetStreamFdSourceClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetSourceClass</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetStreamFdSource</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetSource</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetStreamFdSinkClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetSinkClass</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetStreamFdSink</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetSink</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetStreamFdClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetStreamClass</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetStreamFd</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetStream</type>
      </member>
      <member>
        <name>fd</name>
        <type>DskFileDescriptor</type>
      </member>
      <member>
        <name>do_not_close</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>is_pollable</name>
        <type>unsigned</type>
      </member>
    </structure>
    <enumeration>
      <name>DskFileDescriptorStreamFlags</name>
      <value>
        <name>DSK_FILE_DESCRIPTOR_IS_NOT_WRITABLE</name>
      </value>
      <value>
        <name>DSK_FILE_DESCRIPTOR_IS_NOT_READABLE</name>
      </value>
      <value>
        <name>DSK_FILE_DESCRIPTOR_DO_NOT_CLOSE</name>
      </value>
      <value>
        <name>DSK_FILE_DESCRIPTOR_IS_POLLABLE</name>
      </value>
      <value>
        <name>DSK_FILE_DESCRIPTOR_IS_WRITABLE</name>
      </value>
      <value>
        <name>DSK_FILE_DESCRIPTOR_IS_READABLE</name>
      </value>
      <value>
        <name>DSK_FILE_DESCRIPTOR_IS_NOT_POLLABLE</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_octet_stream_new_fd</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
      <parameter>
        <type>DskFileDescriptorStreamFlags</type>
        <name>flags</name>
      </parameter>
      <parameter>
        <type>DskOctetStreamFd **</type>
        <name>stream_out</name>
      </parameter>
      <parameter>
        <type>DskOctetStreamFdSource **</type>
        <name>source_out</name>
      </parameter>
      <parameter>
        <type>DskOctetStreamFdSink **</type>
        <name>sink_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <global>
      <type>extern const</type>
      <name>DskOctetStreamFdSinkClass</name>
    </global>
    <global>
      <type>extern const</type>
      <name>DskOctetStreamFdSourceClass</name>
    </global>
    <global>
      <type>extern const</type>
      <name>DskOctetStreamFdClass</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-fd.h</h-filename>
    <title>dsk-fd.h</title>
    <function>
      <name>dsk_fd_set_nonblocking</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
    </function>
    <function>
      <name>dsk_fd_set_close_on_exec</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
    </function>
    <function>
      <name>dsk_fd_set_blocking</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
    </function>
    <function>
      <name>dsk_fd_set_no_close_on_exec</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskFileDescriptor</type>
        <name>fd</name>
      </parameter>
    </function>
    <function-typedef>
      <name>DskOutOfFileDescriptorsFunc</name>
      <return-type>void</return-type>
    </function-typedef>
    <global>
      <type>extern</type>
      <name>DskOutOfFileDescriptorsFunc</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-utf8.h</h-filename>
    <title>dsk-utf8.h</title>
    <function>
      <name>dsk_utf8_skip_whitespace</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char **</type>
        <name>p_str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_utf8_encode_unichar</name>
      <return-type>unsigned</return-type>
      <parameter>
        <type>char *</type>
        <name>buf_out</name>
      </parameter>
      <parameter>
        <type>uint32_t</type>
        <name>unicode_value</name>
      </parameter>
    </function>
    <function>
      <name>dsk_utf8_decode_unichar</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>unsigned</type>
        <name>buf_len</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>buf</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>bytes_used_out</name>
      </parameter>
      <parameter>
        <type>uint32_t *</type>
        <name>unicode_value_out</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskUtf8ValidationResult</name>
      <value>
        <name>DSK_UTF8_VALIDATION_PARTIAL</name>
      </value>
      <value>
        <name>DSK_UTF8_VALIDATION_SUCCESS</name>
      </value>
      <value>
        <name>DSK_UTF8_VALIDATION_INVALID</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_utf8_validate</name>
      <return-type>DskUtf8ValidationResult</return-type>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>length_out</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>gskqsortmacro.h</h-filename>
    <title>gskqsortmacro.h</title>
    <structure>
      <name>GskQsortStackNode</name>
      <member>
        <name>start</name>
        <type>size_t</type>
      </member>
    </structure>
  </section>
  <section>
    <h-filename>gsklistmacros.h</h-filename>
    <title>gsklistmacros.h</title>
  </section>
  <section>
    <h-filename>dsk-mime-multipart.h</h-filename>
    <title>dsk-mime-multipart.h</title>
    <function>
      <name>dsk_mime_multipart_decoder_new</name>
      <return-type>DskMimeMultipartDecoder *</return-type>
      <parameter>
        <type>char **</type>
        <name>kv_pairs</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mime_multipart_decoder_feed</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskMimeMultipartDecoder *</type>
        <name>decoder</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>size_t *</type>
        <name>n_parts_ready_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mime_multipart_decoder_done</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskMimeMultipartDecoder *</type>
        <name>decoder</name>
      </parameter>
      <parameter>
        <type>size_t *</type>
        <name>n_parts_ready_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mime_multipart_decoder_dequeue_all</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskMimeMultipartDecoder *</type>
        <name>decoder</name>
      </parameter>
      <parameter>
        <type>DskCgiVariable *</type>
        <name>out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mime_multipart_encode_1</name>
      <return-type>void</return-type>
      <parameter>
        <type>const DskCgiVariable *</type>
        <name>variable</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>output</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-file-util.h</h-filename>
    <title>dsk-file-util.h</title>
    <function>
      <name>dsk_file_get_contents</name>
      <return-type>char *</return-type>
      <parameter>
        <type>const char *</type>
        <name>filename</name>
      </parameter>
      <parameter>
        <type>size_t *</type>
        <name>size_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_file_set_contents</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>filename</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>size</name>
      </parameter>
      <parameter>
        <type>uint8_t *</type>
        <name>contents</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_file_test_exists</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>filename</name>
      </parameter>
    </function>
    <function>
      <name>dsk_mkdir_recursive</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>dir</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>permissions</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_get_tmp_dir</name>
      <return-type>const char *</return-type>
    </function>
    <function>
      <name>dsk_rm_rf</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>dir_or_file</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_remove_dir_recursive</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>dir</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-base64.h</h-filename>
    <title>dsk-base64.h</title>
    <global>
      <type>extern</type>
      <name>int8_t</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-cleanup.h</h-filename>
    <title>dsk-cleanup.h</title>
    <function>
      <name>dsk_cleanup</name>
      <return-type>void</return-type>
    </function>
  </section>
  <section>
    <h-filename>dsk-timezone.h</h-filename>
    <title>dsk-timezone.h</title>
    <structure>
      <name>DskTimezoneTransition</name>
      <member>
        <name>time</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>code</name>
        <type>const char *</type>
      </member>
      <member>
        <name>gmt_offset</name>
        <type>int</type>
      </member>
    </structure>
    <structure>
      <name>DskLeapSeconds</name>
      <member>
        <name>time</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>total_correction</name>
        <type>int</type>
      </member>
    </structure>
    <structure>
      <name>DskTimezone</name>
      <member>
        <name>n_transitions</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>transitions</name>
        <type>DskTimezoneTransition *</type>
      </member>
      <member>
        <name>n_leap_seconds</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>leap_seconds</name>
        <type>DskTimezoneLeapSecondInfo *</type>
      </member>
      <member>
        <name>tz_codes</name>
        <type>char **</type>
      </member>
    </structure>
  </section>
  <section>
    <h-filename>dsk-http-client-auth.h</h-filename>
    <title>dsk-http-client-auth.h</title>
    <function>
      <name>dsk_http_client_auth_new</name>
      <return-type>DskHttpClientAuth *</return-type>
    </function>
    <function>
      <name>dsk_http_client_auth_set_info</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuth *</type>
        <name>agent</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>username</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>password</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_client_auth_add_preemptive_basic</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuth *</type>
        <name>agent</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>realm</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>username</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>password</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_client_auth_enable_caching</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuth *</type>
        <name>agent</name>
      </parameter>
    </function>
    <structure>
      <name>DskHttpClientAuthRequest</name>
      <member>
        <name>key_value_pairs</name>
        <type>char **</type>
      </member>
      <member>
        <name>agent</name>
        <type>DskHttpClientAuth *</type>
      </member>
    </structure>
    <function-typedef>
      <name>DskHttpClientAuthHandler</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuthRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>handler_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_http_client_auth_add_callback</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuth *</type>
        <name>agent</name>
      </parameter>
      <parameter>
        <type>DskHttpClientAuthHandler</type>
        <name>handler</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>handler_data</name>
      </parameter>
      <parameter>
        <type>DskDestroyNotify</type>
        <name>handler_destroy</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_client_auth_request_respond</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuthRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>username</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>password</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_client_auth_request_respond_fail</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuthRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>message</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_client_auth_request_respond_na</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuthRequest *</type>
        <name>request</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_client_auth_request_trap_cancellation</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuthRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>DskHttpClientAuthHandler</type>
        <name>cancellation_handler</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_client_auth_request_respond_cancelled</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClientAuthRequest *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-object.h</h-filename>
    <title>dsk-object.h</title>
    <structure>
      <name>DskObjectClass</name>
      <member>
        <name>name</name>
        <type>const char *</type>
      </member>
      <member>
        <name>parent_class</name>
        <type>const DskObjectClass *</type>
      </member>
      <member>
        <name>sizeof_class</name>
        <type>size_t</type>
      </member>
      <member>
        <name>sizeof_instance</name>
        <type>size_t</type>
      </member>
      <member>
        <name>pointers_after_base</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>object_class_magic</name>
        <type>unsigned</type>
      </member>
      <method>
        <name>init</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskObject *</type>
          <name>object</name>
        </parameter>
      </method>
      <method>
        <name>finalize</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskObject *</type>
          <name>object</name>
        </parameter>
      </method>
      <member>
        <name>cache_data</name>
        <type>DskObjectClassCacheData *</type>
      </member>
    </structure>
    <function-typedef>
      <name>DskObjectInitFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskObject *</type>
        <name>object</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskObjectFinalizeFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskObject *</type>
        <name>object</name>
      </parameter>
    </function-typedef>
    <structure>
      <name>DskObjectClassCacheData</name>
      <member>
        <name>instantiated</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>n_init_funcs</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>init_funcs</name>
        <type>DskObjectInitFunc *</type>
      </member>
      <member>
        <name>n_finalizer_funcs</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>finalizer_funcs</name>
        <type>DskObjectFinalizeFunc *</type>
      </member>
      <member>
        <name>prev_instantiated</name>
        <type>const DskObjectClass *</type>
      </member>
    </structure>
    <structure>
      <name>DskWeakPointer</name>
      <member>
        <name>ref_count</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>object</name>
        <type>DskObject *</type>
      </member>
    </structure>
    <structure>
      <name>DskObjectFinalizeHandler</name>
      <member>
        <name>destroy</name>
        <type>DskDestroyNotify</type>
      </member>
      <member>
        <name>destroy_data</name>
        <type>void *</type>
      </member>
      <member>
        <name>next</name>
        <type>DskObjectFinalizeHandler *</type>
      </member>
    </structure>
    <structure>
      <name>DskObject</name>
      <member>
        <name>object_class</name>
        <type>const DskObjectClass *</type>
      </member>
      <member>
        <name>ref_count</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>weak_pointer</name>
        <type>DskWeakPointer *</type>
      </member>
      <member>
        <name>finalizer_list</name>
        <type>DskObjectFinalizeHandler *</type>
      </member>
    </structure>
    <function>
      <name>dsk_object_is_a</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>isa_class</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_class_is_a</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const void *</type>
        <name>object_class</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>isa_class</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_cast</name>
      <return-type>void *</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>isa_class</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>filename</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>line</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_class_cast</name>
      <return-type>void *</return-type>
      <parameter>
        <type>void *</type>
        <name>object_class</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>isa_class</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>filename</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>line</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_cast_get_class</name>
      <return-type>const void *</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>isa_class</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>filename</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>line</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_unref_f</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_ref_f</name>
      <return-type>void *</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_trap_finalize</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskObject *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>DskDestroyNotify</type>
        <name>destroy</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>destroy_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_untrap_finalize</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskObject *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>DskDestroyNotify</type>
        <name>destroy</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>destroy_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_weak_pointer_ref</name>
      <return-type>DskWeakPointer *</return-type>
      <parameter>
        <type>DskWeakPointer *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_weak_pointer_unref</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskWeakPointer *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_get_weak_pointer</name>
      <return-type>DskWeakPointer *</return-type>
      <parameter>
        <type>DskObject *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_object_handle_last_unref</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskObject *</type>
        <name>o</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_object_class_first_instance</name>
      <return-type>void</return-type>
      <parameter>
        <type>const DskObjectClass *</type>
        <name>c</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_object_cleanup_classes</name>
      <return-type>void</return-type>
    </function>
    <global>
      <type>extern</type>
      <name>DskObjectClass</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-http-client.h</h-filename>
    <title>dsk-http-client.h</title>
    <structure>
      <name>DskHttpClientRequestFuncs</name>
      <method>
        <name>handle_done</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientTransfer *</type>
          <name>xfer</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
      </method>
      <method>
        <name>handle_fail</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientTransfer *</type>
          <name>xfer</name>
        </parameter>
        <parameter>
          <type>DskError *</type>
          <name>error</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
      </method>
      <method>
        <name>handle_response</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientTransfer *</type>
          <name>xfer</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
      </method>
      <method>
        <name>handle_stream</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientTransfer *</type>
          <name>xfer</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
      </method>
      <method>
        <name>handle_redirecting</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientTransfer *</type>
          <name>xfer</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
      </method>
      <method>
        <name>handle_retrying</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientTransfer *</type>
          <name>xfer</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
      </method>
      <method>
        <name>handle_error</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientTransfer *</type>
          <name>xfer</name>
        </parameter>
        <parameter>
          <type>DskError *</type>
          <name>error</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
      </method>
      <method>
        <name>handle_destroy</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpClientTransfer *</type>
          <name>xfer</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>func_data</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskHttpClientClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpClient</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpClientOptions</name>
      <member>
        <name>max_connections</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_connections_per_host</name>
        <type>unsigned</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_client_new</name>
      <return-type>DskHttpClient *</return-type>
      <parameter>
        <type>DskHttpClientOptions *</type>
        <name>options</name>
      </parameter>
    </function>
    <structure>
      <name>DskHttpClientHostOptions</name>
      <member>
        <name>max_pipelined</name>
        <type>int</type>
      </member>
      <member>
        <name>max_connections</name>
        <type>int</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_client_configure_host</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpClient *</type>
        <name>client</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>port</name>
      </parameter>
      <parameter>
        <type>DskHttpClientHostOptions *</type>
        <name>options</name>
      </parameter>
    </function>
    <structure>
      <name>DskHttpClientRequestOptions</name>
      <member>
        <name>url</name>
        <type>char *</type>
      </member>
      <member>
        <name>host</name>
        <type>char *</type>
      </member>
      <member>
        <name>port</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>path</name>
        <type>char *</type>
      </member>
      <member>
        <name>query</name>
        <type>char *</type>
      </member>
      <member>
        <name>has_ip_address</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>ip_address</name>
        <type>DskIpAddress</type>
      </member>
      <member>
        <name>local_socket_path</name>
        <type>char *</type>
      </member>
      <member>
        <name>n_extra_get_cgi_variables</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>extra_get_cgi_variables</name>
        <type>DskCgiVariable *</type>
      </member>
      <member>
        <name>always_pipeline</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>never_pipeline</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>n_post_cgi_variables</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>post_cgi_variables</name>
        <type>DskCgiVariable *</type>
      </member>
      <member>
        <name>request_body</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>safe_mode</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>may_restart_stream</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>n_unparsed_headers</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>unparsed_headers</name>
        <type>char **</type>
      </member>
      <member>
        <name>unparsed_misc_headers</name>
        <type>DskHttpHeaderMisc *</type>
      </member>
      <member>
        <name>keepalive_millis</name>
        <type>int</type>
      </member>
      <member>
        <name>connection_close</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>allow_gzip</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>has_postdata_md5sum</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>postdata_md5sum_binary</name>
        <type>uint8_t</type>
      </member>
      <member>
        <name>postdata_md5sum_hex</name>
        <type>char *</type>
      </member>
      <member>
        <name>gzip_post_data</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>check_md5sum</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>max_retries</name>
        <type>int</type>
      </member>
      <member>
        <name>retry_sleep_millis</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_redirects</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_request_time_millis</name>
        <type>int</type>
      </member>
      <member>
        <name>max_start_millis</name>
        <type>int</type>
      </member>
      <member>
        <name>max_millis</name>
        <type>int</type>
      </member>
      <member>
        <name>safe_max_memory</name>
        <type>size_t</type>
      </member>
      <member>
        <name>safe_max_disk</name>
        <type>uint64_t</type>
      </member>
      <member>
        <name>n_cookies</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>cookies</name>
        <type>DskHttpCookie *</type>
      </member>
      <member>
        <name>funcs</name>
        <type>DskHttpClientRequestFuncs *</type>
      </member>
      <member>
        <name>func_data</name>
        <type>void *</type>
      </member>
      <member>
        <name>destroy</name>
        <type>DskDestroyNotify</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_client_request</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskHttpClient *</type>
        <name>client</name>
      </parameter>
      <parameter>
        <type>DskHttpClientRequestOptions *</type>
        <name>options</name>
      </parameter>
      <parameter>
        <type>DskOctetSource *</type>
        <name>post_data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-octet-filter-misc.h</h-filename>
    <title>dsk-octet-filter-misc.h</title>
    <function>
      <name>dsk_octet_filter_identity_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_base64_encoder_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>break_lines</name>
      </parameter>
    </function>
    <function>
      <name>dsk_base64_decoder_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_hex_encoder_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>break_lines</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>include_spaces</name>
      </parameter>
    </function>
    <function>
      <name>dsk_hex_decoder_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_url_encoder_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_url_decoder_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_c_quoter_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>add_quotes</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>protect_trigraphs</name>
      </parameter>
    </function>
    <function>
      <name>dsk_c_unquoter_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>remove_quotes</name>
      </parameter>
    </function>
    <function>
      <name>dsk_quote_printable_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_unquote_printable_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_xml_escaper_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_xml_unescaper_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_utf8_to_utf16_converter_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>big_endian</name>
      </parameter>
    </function>
    <function>
      <name>dsk_utf16_to_utf8_converter_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>initially_big_endian</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>require_endian_marker</name>
      </parameter>
    </function>
    <function>
      <name>dsk_byte_doubler_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>uint8_t</type>
        <name>c</name>
      </parameter>
    </function>
    <function>
      <name>dsk_byte_undoubler_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>uint8_t</type>
        <name>c</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>ignore_errors</name>
      </parameter>
    </function>
    <function>
      <name>dsk_whitespace_trimmer_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
    <function>
      <name>dsk_octet_filter_chain_new_take</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>n_filters</name>
      </parameter>
      <parameter>
        <type>DskOctetFilter **</type>
        <name>filters</name>
      </parameter>
    </function>
    <function>
      <name>dsk_octet_filter_chain_new_take_list</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>DskOctetFilter *</type>
        <name>first</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskUtf8FixerMode</name>
      <value>
        <name>DSK_UTF8_FIXER_DROP</name>
      </value>
      <value>
        <name>DSK_UTF8_FIXER_LATIN1</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_utf8_fixer_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>DskUtf8FixerMode</type>
        <name>mode</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-http-server-stream.h</h-filename>
    <title>dsk-http-server-stream.h</title>
    <structure>
      <name>DskHttpServerStreamClass</name>
      <member>
        <name>base_instance</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpServerStream</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>sink</name>
        <type>DskOctetSink *</type>
      </member>
      <member>
        <name>source</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>incoming_data</name>
        <type>DskBuffer</type>
      </member>
      <member>
        <name>outgoing_data</name>
        <type>DskBuffer</type>
      </member>
      <member>
        <name>read_trap</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>write_trap</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>wait_for_content_complete</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>no_more_transfers</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>deferred_shutdown</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>shutdown</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>first_transfer</name>
        <type>DskHttpServerStreamTransfer *</type>
      </member>
      <member>
        <name>last_transfer</name>
        <type>DskHttpServerStreamTransfer *</type>
      </member>
      <member>
        <name>read_transfer</name>
        <type>DskHttpServerStreamTransfer *</type>
      </member>
      <member>
        <name>next_request</name>
        <type>DskHttpServerStreamTransfer *</type>
      </member>
      <member>
        <name>request_available</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>max_header_size</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_pipelined_requests</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_post_data_size</name>
        <type>uint64_t</type>
      </member>
      <member>
        <name>max_outgoing_buffer_size</name>
        <type>unsigned</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpServerStreamOptions</name>
      <member>
        <name>wait_for_content_complete</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>max_header_size</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_pipelined_requests</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_post_data_pending</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>max_post_data_size</name>
        <type>uint64_t</type>
      </member>
      <member>
        <name>max_outgoing_buffer_size</name>
        <type>unsigned</type>
      </member>
    </structure>
    <enumeration>
      <name>DskHttpServerStreamReadState</name>
      <value>
        <name>DSK_HTTP_SERVER_STREAM_READ_DONE</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_STREAM_READ_IN_XFER_CHUNKED_HEADER_EXTENSION</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_STREAM_READ_AFTER_XFER_CHUNK</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_STREAM_READ_XFER_CHUNK_TRAILER</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_STREAM_READ_IN_XFER_CHUNK</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_STREAM_READ_IN_POST</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_STREAM_READ_IN_XFER_CHUNKED_HEADER</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_STREAM_READ_NEED_HEADER</name>
      </value>
    </enumeration>
    <structure>
      <name>DskHttpServerStreamTransfer</name>
      <member>
        <name>owner</name>
        <type>DskHttpServerStream *</type>
      </member>
      <member>
        <name>request</name>
        <type>DskHttpRequest *</type>
      </member>
      <member>
        <name>post_data</name>
        <type>DskMemorySource *</type>
      </member>
      <member>
        <name>response</name>
        <type>DskHttpResponse *</type>
      </member>
      <member>
        <name>content</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>content_readable_trap</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>buffer_low_trap</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>returned</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>responded</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>failed</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>blocked_content</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>read_state</name>
        <type>DskHttpServerStreamReadState</type>
      </member>
    </structure>
    <structure>
      <name>DskHttpServerStreamFuncs</name>
      <method>
        <name>error_notify</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpServerStreamTransfer *</type>
          <name>transfer</name>
        </parameter>
        <parameter>
          <type>DskError *</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>post_data_complete</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpServerStreamTransfer *</type>
          <name>transfer</name>
        </parameter>
      </method>
      <method>
        <name>post_data_failed</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpServerStreamTransfer *</type>
          <name>transfer</name>
        </parameter>
      </method>
      <method>
        <name>destroy</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskHttpServerStreamTransfer *</type>
          <name>transfer</name>
        </parameter>
      </method>
    </structure>
    <function>
      <name>dsk_http_server_stream_new</name>
      <return-type>DskHttpServerStream *</return-type>
      <parameter>
        <type>DskOctetSink *</type>
        <name>sink</name>
      </parameter>
      <parameter>
        <type>DskOctetSource *</type>
        <name>source</name>
      </parameter>
      <parameter>
        <type>DskHttpServerStreamOptions *</type>
        <name>options</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_stream_get_request</name>
      <return-type>DskHttpServerStreamTransfer *</return-type>
      <parameter>
        <type>DskHttpServerStream *</type>
        <name>stream</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_stream_transfer_set_funcs</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerStreamTransfer *</type>
        <name>xfer</name>
      </parameter>
      <parameter>
        <type>DskHttpServerStreamFuncs *</type>
        <name>funcs</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_stream_shutdown</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerStream *</type>
        <name>stream</name>
      </parameter>
    </function>
    <structure>
      <name>DskHttpServerStreamResponseOptions</name>
      <member>
        <name>header_options</name>
        <type>DskHttpResponseOptions *</type>
      </member>
      <member>
        <name>header</name>
        <type>DskHttpResponse *</type>
      </member>
      <member>
        <name>content_stream</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>content_length</name>
        <type>int64_t</type>
      </member>
      <member>
        <name>content_body</name>
        <type>const uint8_t *</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_server_stream_respond</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskHttpServerStreamTransfer *</type>
        <name>transfer</name>
      </parameter>
      <parameter>
        <type>DskHttpServerStreamResponseOptions *</type>
        <name>options</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <global>
      <type>extern</type>
      <name>DskHttpServerStreamClass</name>
    </global>
    <function>
      <name>dsk_http_server_stream_respond_switch_protocol</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerStreamTransfer *</type>
        <name>transfer</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>upgrade</name>
      </parameter>
      <parameter>
        <type>DskMemorySink **</type>
        <name>sink_out</name>
      </parameter>
      <parameter>
        <type>DskMemorySource **</type>
        <name>source_out</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-http-server.h</h-filename>
    <title>dsk-http-server.h</title>
    <structure>
      <name>DskHttpServerRequest</name>
      <member>
        <name>server</name>
        <type>DskHttpServer *</type>
      </member>
      <member>
        <name>transfer</name>
        <type>DskHttpServerStreamTransfer *</type>
      </member>
      <member>
        <name>request_header</name>
        <type>DskHttpRequest *</type>
      </member>
      <member>
        <name>bind_info</name>
        <type>DskHttpServerBindInfo *</type>
      </member>
      <member>
        <name>cgi_variables_computed</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>n_cgi_variables</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>cgi_variables</name>
        <type>DskCgiVariable *</type>
      </member>
      <member>
        <name>has_raw_post_data</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>raw_post_data_size</name>
        <type>size_t</type>
      </member>
      <member>
        <name>raw_post_data</name>
        <type>uint8_t *</type>
      </member>
    </structure>
    <function-typedef>
      <name>DskHttpServerTestFunc</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskHttpServerStreamingPostFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>DskOctetSource *</type>
        <name>post_data</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskHttpServerCgiFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function-typedef>
    <enumeration>
      <name>DskHttpServerMatchType</name>
      <value>
        <name>DSK_HTTP_SERVER_MATCH_PATH</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_MATCH_BIND_PATH</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_MATCH_HOST</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_MATCH_USER_AGENT</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_MATCH_BIND_PORT</name>
      </value>
    </enumeration>
    <function>
      <name>dsk_http_server_new</name>
      <return-type>DskHttpServer *</return-type>
    </function>
    <function>
      <name>dsk_http_server_add_match</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServer *</type>
        <name>server</name>
      </parameter>
      <parameter>
        <type>DskHttpServerMatchType</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>pattern</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_match_save</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServer *</type>
        <name>server</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_match_restore</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServer *</type>
        <name>server</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_bind_tcp</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskHttpServer *</type>
        <name>server</name>
      </parameter>
      <parameter>
        <type>DskIpAddress *</type>
        <name>bind_addr</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>port</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_bind_local</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskHttpServer *</type>
        <name>server</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>path</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_register_streaming_post_handler</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServer *</type>
        <name>server</name>
      </parameter>
      <parameter>
        <type>DskHttpServerStreamingPostFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
      <parameter>
        <type>DskHookDestroy</type>
        <name>destroy</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_register_cgi_handler</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServer *</type>
        <name>server</name>
      </parameter>
      <parameter>
        <type>DskHttpServerCgiFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
      <parameter>
        <type>DskHookDestroy</type>
        <name>destroy</name>
      </parameter>
    </function>
    <structure>
      <name>DskHttpServerResponseOptions</name>
      <member>
        <name>source</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>source_filename</name>
        <type>const char *</type>
      </member>
      <member>
        <name>source_buffer</name>
        <type>DskBuffer *</type>
      </member>
      <member>
        <name>content_body</name>
        <type>const uint8_t *</type>
      </member>
      <member>
        <name>content_length</name>
        <type>int64_t</type>
      </member>
      <member>
        <name>content_type</name>
        <type>const char *</type>
      </member>
      <member>
        <name>content_main_type</name>
        <type>const char *</type>
      </member>
      <member>
        <name>content_sub_type</name>
        <type>const char *</type>
      </member>
      <member>
        <name>content_charset</name>
        <type>const char *</type>
      </member>
    </structure>
    <function>
      <name>dsk_http_server_request_respond</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>DskHttpServerResponseOptions *</type>
        <name>options</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_request_respond_error</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>DskHttpStatus</type>
        <name>status</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>message</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_request_redirect</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>DskHttpStatus</type>
        <name>status</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>location</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_request_internal_redirect</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>new_path</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_request_pass</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_server_request_lookup_cgi</name>
      <return-type>DskCgiVariable *</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskHttpServerTryResult</name>
      <value>
        <name>DSK_HTTP_SERVER_TRY_ERROR</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_TRY_OK</name>
      </value>
      <value>
        <name>DSK_HTTP_SERVER_TRY_PASS</name>
      </value>
    </enumeration>
    <function-typedef>
      <name>DskHttpServerTryFunc</name>
      <return-type>DskHttpServerTryResult</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskHttpServerConnectFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServerRequest *</type>
        <name>request</name>
      </parameter>
      <parameter>
        <type>DskMemorySink *</type>
        <name>from_client</name>
      </parameter>
      <parameter>
        <type>DskMemorySource *</type>
        <name>to_client</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_http_server_register_connect_handler</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpServer *</type>
        <name>server</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>upgrade_proto</name>
      </parameter>
      <parameter>
        <type>DskHttpServerTryFunc</type>
        <name>try_func</name>
      </parameter>
      <parameter>
        <type>DskHttpServerConnectFunc</type>
        <name>func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>func_data</name>
      </parameter>
      <parameter>
        <type>DskHookDestroy</type>
        <name>destroy</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-octet-io.h</h-filename>
    <title>dsk-octet-io.h</title>
    <structure>
      <name>DskOctetSourceClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
      <method>
        <name>read</name>
        <return-type>DskIOResult</return-type>
        <parameter>
          <type>DskOctetSource *</type>
          <name>source</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>max_len</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>data_out</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>bytes_read_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>read_buffer</name>
        <return-type>DskIOResult</return-type>
        <parameter>
          <type>DskOctetSource *</type>
          <name>source</name>
        </parameter>
        <parameter>
          <type>DskBuffer *</type>
          <name>read_buffer</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>shutdown</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskOctetSource *</type>
          <name>source</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskOctetSource</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>stream</name>
        <type>DskOctetStream *</type>
      </member>
      <member>
        <name>readable_hook</name>
        <type>DskHook</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetSinkClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
      <method>
        <name>write</name>
        <return-type>DskIOResult</return-type>
        <parameter>
          <type>DskOctetSink *</type>
          <name>sink</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>max_len</name>
        </parameter>
        <parameter>
          <type>const void *</type>
          <name>data_out</name>
        </parameter>
        <parameter>
          <type>unsigned *</type>
          <name>n_written_out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>write_buffer</name>
        <return-type>DskIOResult</return-type>
        <parameter>
          <type>DskOctetSink *</type>
          <name>sink</name>
        </parameter>
        <parameter>
          <type>DskBuffer *</type>
          <name>write_buffer</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>shutdown</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskOctetSink *</type>
          <name>sink</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskOctetSink</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>stream</name>
        <type>DskOctetStream *</type>
      </member>
      <member>
        <name>writable_hook</name>
        <type>DskHook</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetStreamClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetStream</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>source</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>sink</name>
        <type>DskOctetSink *</type>
      </member>
      <member>
        <name>error_hook</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>latest_error</name>
        <type>DskError *</type>
      </member>
    </structure>
    <function>
      <name>dsk_octet_stream_set_last_error</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskOctetStream *</type>
        <name>stream</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_octet_source_get_length</name>
      <return-type>int64_t</return-type>
      <parameter>
        <type>DskOctetSource *</type>
        <name>source</name>
      </parameter>
    </function>
    <structure>
      <name>DskOctetConnectionClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetConnection</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>buffer</name>
        <type>DskBuffer</type>
      </member>
      <member>
        <name>source</name>
        <type>DskOctetSource *</type>
      </member>
      <member>
        <name>sink</name>
        <type>DskOctetSink *</type>
      </member>
      <member>
        <name>read_trap</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>write_trap</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>max_buffer</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>shutdown_on_read_error</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>shutdown_on_write_error</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>last_error_from_reading</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>last_error</name>
        <type>DskError *</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetConnectionOptions</name>
      <member>
        <name>max_buffer</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>shutdown_on_read_error</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>shutdown_on_write_error</name>
        <type>dsk_boolean</type>
      </member>
    </structure>
    <function>
      <name>dsk_octet_connection_new</name>
      <return-type>DskOctetConnection *</return-type>
      <parameter>
        <type>DskOctetSource *</type>
        <name>source</name>
      </parameter>
      <parameter>
        <type>DskOctetSink *</type>
        <name>sink</name>
      </parameter>
      <parameter>
        <type>DskOctetConnectionOptions *</type>
        <name>opt</name>
      </parameter>
    </function>
    <function>
      <name>dsk_octet_connection_shutdown</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskOctetConnection *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_octet_connection_disconnect</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskOctetConnection *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_octet_pipe_new</name>
      <return-type>void</return-type>
      <parameter>
        <type>unsigned</type>
        <name>pipe_buffer_size</name>
      </parameter>
      <parameter>
        <type>DskOctetSink **</type>
        <name>sink_out</name>
      </parameter>
      <parameter>
        <type>DskOctetSource **</type>
        <name>source_out</name>
      </parameter>
    </function>
    <structure>
      <name>DskOctetFilterClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
      <method>
        <name>process</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskOctetFilter *</type>
          <name>filter</name>
        </parameter>
        <parameter>
          <type>DskBuffer *</type>
          <name>out</name>
        </parameter>
        <parameter>
          <type>unsigned</type>
          <name>in_length</name>
        </parameter>
        <parameter>
          <type>const uint8_t *</type>
          <name>in_data</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>finish</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskOctetFilter *</type>
          <name>filter</name>
        </parameter>
        <parameter>
          <type>DskBuffer *</type>
          <name>out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskOctetFilter</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
    </structure>
    <function>
      <name>dsk_octet_filter_process_buffer</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskOctetFilter *</type>
        <name>filter</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>in_len</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>in</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>discard</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_octet_filter_source</name>
      <return-type>DskOctetSource *</return-type>
      <parameter>
        <type>DskOctetSource *</type>
        <name>source</name>
      </parameter>
      <parameter>
        <type>DskOctetFilter *</type>
        <name>filter</name>
      </parameter>
    </function>
    <function>
      <name>dsk_octet_filter_sink</name>
      <return-type>DskOctetSink *</return-type>
      <parameter>
        <type>DskOctetSource *</type>
        <name>sink</name>
      </parameter>
      <parameter>
        <type>DskOctetFilter *</type>
        <name>filter</name>
      </parameter>
    </function>
    <global>
      <type>extern const</type>
      <name>DskOctetSourceClass</name>
    </global>
    <global>
      <type>extern const</type>
      <name>DskOctetSinkClass</name>
    </global>
    <global>
      <type>extern const</type>
      <name>DskOctetStreamClass</name>
    </global>
    <global>
      <type>extern const</type>
      <name>DskOctetConnectionClass</name>
    </global>
    <global>
      <type>extern const</type>
      <name>DskOctetFilterClass</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-hook.h</h-filename>
    <title>dsk-hook.h</title>
    <function-typedef>
      <name>DskHookFunc</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskHookDestroy</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>callback_data</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskHookSetPoll</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>dsk_boolean</type>
        <name>is_trapped</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskHookObjectFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>object</name>
      </parameter>
    </function-typedef>
    <structure>
      <name>DskHookFuncs</name>
      <member>
        <name>ref</name>
        <type>DskHookObjectFunc</type>
      </member>
      <member>
        <name>unref</name>
        <type>DskHookObjectFunc</type>
      </member>
      <member>
        <name>set_poll</name>
        <type>DskHookSetPoll</type>
      </member>
    </structure>
    <structure>
      <name>DskHookTrap</name>
      <member>
        <name>callback</name>
        <type>DskHookFunc</type>
      </member>
      <member>
        <name>callback_data</name>
        <type>void *</type>
      </member>
      <member>
        <name>callback_data_destroy</name>
        <type>DskHookDestroy</type>
      </member>
      <member>
        <name>owner</name>
        <type>DskHook *</type>
      </member>
      <member>
        <name>next</name>
        <type>DskHookTrap *</type>
      </member>
      <member>
        <name>is_notifying</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>destroy_in_notify</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>block_count</name>
        <type>unsigned short</type>
      </member>
    </structure>
    <structure>
      <name>DskHook</name>
      <member>
        <name>object</name>
        <type>void *</type>
      </member>
      <member>
        <name>funcs</name>
        <type>DskHookFuncs *</type>
      </member>
      <member>
        <name>char</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>trap_count</name>
        <type>unsigned short</type>
      </member>
      <member>
        <name>trap</name>
        <type>DskHookTrap</type>
      </member>
      <member>
        <name>idle_prev</name>
        <type>DskHook *</type>
      </member>
    </structure>
    <function>
      <name>dsk_hook_trap_destroy</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHookTrap *</type>
        <name>trap</name>
      </parameter>
    </function>
    <function>
      <name>dsk_hook_notify</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHook *</type>
        <name>hook</name>
      </parameter>
    </function>
    <function>
      <name>dsk_hook_clear</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHook *</type>
        <name>hook</name>
      </parameter>
    </function>
    <global>
      <type>extern</type>
      <name>DskHookFuncs</name>
    </global>
    <global>
      <type>extern</type>
      <name>DskMemPoolFixed</name>
    </global>
    <function>
      <name>_dsk_hook_trap_count_nonzero</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHook *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_hook_trap_count_zero</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHook *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_hook_add_to_idle_notify_list</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHook *</type>
        <name>hook</name>
      </parameter>
    </function>
    <function>
      <name>_dsk_hook_remove_from_idle_notify_list</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHook *</type>
        <name>hook</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-json.h</h-filename>
    <title>dsk-json.h</title>
    <enumeration>
      <name>DskJsonValueType</name>
      <value>
        <name>DSK_JSON_VALUE_OBJECT</name>
      </value>
      <value>
        <name>DSK_JSON_VALUE_NULL</name>
      </value>
      <value>
        <name>DSK_JSON_VALUE_ARRAY</name>
      </value>
      <value>
        <name>DSK_JSON_VALUE_STRING</name>
      </value>
      <value>
        <name>DSK_JSON_VALUE_BOOLEAN</name>
      </value>
      <value>
        <name>DSK_JSON_VALUE_NUMBER</name>
      </value>
    </enumeration>
    <structure>
      <name>DskJsonValue</name>
      <member>
        <name>type</name>
        <type>DskJsonValueType</type>
      </member>
    </structure>
    <structure>
      <name>DskJsonMember</name>
      <member>
        <name>name</name>
        <type>char *</type>
      </member>
      <member>
        <name>value</name>
        <type>DskJsonValue *</type>
      </member>
    </structure>
    <function>
      <name>dsk_json_parser_new</name>
      <return-type>DskJsonParser *</return-type>
    </function>
    <function>
      <name>dsk_json_parser_feed</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskJsonParser *</type>
        <name>parser</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>len</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_parser_pop</name>
      <return-type>DskJsonValue *</return-type>
      <parameter>
        <type>DskJsonParser *</type>
        <name>parser</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_parser_finish</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskJsonParser *</type>
        <name>parser</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_parser_destroy</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskJsonParser *</type>
        <name>parser</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_value_new_null</name>
      <return-type>DskJsonValue *</return-type>
    </function>
    <function>
      <name>dsk_json_value_new_boolean</name>
      <return-type>DskJsonValue *</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>value</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_value_new_object</name>
      <return-type>DskJsonValue *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>n_members</name>
      </parameter>
      <parameter>
        <type>DskJsonMember *</type>
        <name>members</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_value_new_array</name>
      <return-type>DskJsonValue *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>n_values</name>
      </parameter>
      <parameter>
        <type>DskJsonValue **</type>
        <name>values</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_value_new_string</name>
      <return-type>DskJsonValue *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>n_bytes</name>
      </parameter>
      <parameter>
        <type>char *</type>
        <name>str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_value_new_number</name>
      <return-type>DskJsonValue *</return-type>
      <parameter>
        <type>double</type>
        <name>value</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_value_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskJsonValue *</type>
        <name>value</name>
      </parameter>
    </function>
    <function-typedef>
      <name>DskJsonAppendFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>append_data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_json_value_serialize</name>
      <return-type>void</return-type>
      <parameter>
        <type>const DskJsonValue *</type>
        <name>value</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>indent</name>
      </parameter>
      <parameter>
        <type>DskJsonAppendFunc</type>
        <name>append_func</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>append_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_value_to_buffer</name>
      <return-type>void</return-type>
      <parameter>
        <type>const DskJsonValue *</type>
        <name>value</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>indent</name>
      </parameter>
      <parameter>
        <type>DskBuffer *</type>
        <name>out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_object_get_value</name>
      <return-type>DskJsonValue *</return-type>
      <parameter>
        <type>DskJsonValue *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <function>
      <name>dsk_json_object_get_member</name>
      <return-type>DskJsonMember *</return-type>
      <parameter>
        <type>DskJsonValue *</type>
        <name>object</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-date.h</h-filename>
    <title>dsk-date.h</title>
    <structure>
      <name>DskDate</name>
      <member>
        <name>year</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>month</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>day</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>hour</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>minute</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>second</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>zone_offset</name>
        <type>int</type>
      </member>
    </structure>
    <function>
      <name>dsk_date_parse</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>char **</type>
        <name>end</name>
      </parameter>
      <parameter>
        <type>DskDate *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_date_print_rfc822</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDate *</type>
        <name>date</name>
      </parameter>
      <parameter>
        <type>char *</type>
        <name>buf</name>
      </parameter>
    </function>
    <function>
      <name>dsk_date_print_rfc850</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDate *</type>
        <name>date</name>
      </parameter>
      <parameter>
        <type>char *</type>
        <name>buf</name>
      </parameter>
    </function>
    <function>
      <name>dsk_date_print_iso8601</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskDate *</type>
        <name>date</name>
      </parameter>
      <parameter>
        <type>char *</type>
        <name>buf</name>
      </parameter>
    </function>
    <function>
      <name>dsk_date_to_unixtime</name>
      <return-type>dsk_time_t</return-type>
      <parameter>
        <type>DskDate *</type>
        <name>date</name>
      </parameter>
    </function>
    <function>
      <name>dsk_unixtime_to_date</name>
      <return-type>void</return-type>
      <parameter>
        <type>dsk_time_t</type>
        <name>unixtime</name>
      </parameter>
      <parameter>
        <type>DskDate *</type>
        <name>date_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_date_parse_timezone</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>at</name>
      </parameter>
      <parameter>
        <type>char **</type>
        <name>end</name>
      </parameter>
      <parameter>
        <type>int *</type>
        <name>zone_offset_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_date_get_days_since_epoch</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskDate *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-printf.h</h-filename>
    <title>dsk-printf.h</title>
    <function>
      <name>dsk_printf</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function-typedef>
      <name>DskPrintfAppendFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>void *</type>
        <name>append_data</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
    </function-typedef>
    <function>
      <name>dsk_printf_valist</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <enumeration>
      <name>DskPrintfCollectType</name>
      <value>
        <name>DSK_PRINTF_COLLECT_SIZE_T</name>
      </value>
      <value>
        <name>DSK_PRINTF_COLLECT_INT</name>
      </value>
      <value>
        <name>DSK_PRINTF_COLLECT_POINTER</name>
      </value>
      <value>
        <name>DSK_PRINTF_COLLECT_DOUBLE</name>
      </value>
      <value>
        <name>DSK_PRINTF_COLLECT_INT64</name>
      </value>
    </enumeration>
    <structure>
      <name>DskPrintfCollectArg</name>
      <member>
        <name>type</name>
        <type>DskPrintfCollectType</type>
      </member>
    </structure>
    <function-typedef>
      <name>DskPrintfFunc</name>
      <return-type>void</return-type>
      <parameter>
        <type>unsigned</type>
        <name>n_args</name>
      </parameter>
      <parameter>
        <type>DskPrintfCollectArg *</type>
        <name>args</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>DskPrintfAppendFunc</type>
        <name>append</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>append_data</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>print_func_data</name>
      </parameter>
    </function-typedef>
  </section>
  <section>
    <h-filename>dsk.h</h-filename>
    <title>dsk.h</title>
  </section>
  <section>
    <h-filename>dsk-xml-binding.h</h-filename>
    <title>dsk-xml-binding.h</title>
    <enumeration>
      <name>DskXmlBindingQuantity</name>
      <value>
        <name>DSK_XML_BINDING_OPTIONAL</name>
      </value>
      <value>
        <name>DSK_XML_BINDING_REPEATED</name>
      </value>
      <value>
        <name>DSK_XML_BINDING_REQUIRED</name>
      </value>
      <value>
        <name>DSK_XML_BINDING_REQUIRED_REPEATED</name>
      </value>
    </enumeration>
    <structure>
      <name>DskXmlBindingType</name>
      <member>
        <name>is_fundamental</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>is_static</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>is_struct</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>is_union</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>ref_count</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>sizeof_instance</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>alignof_instance</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>ns</name>
        <type>DskXmlBindingNamespace *</type>
      </member>
      <member>
        <name>name</name>
        <type>char *</type>
      </member>
      <member>
        <name>ctypename</name>
        <type>char *</type>
      </member>
      <method>
        <name>parse</name>
        <return-type>dsk_boolean</return-type>
        <parameter>
          <type>DskXmlBindingType *</type>
          <name>type</name>
        </parameter>
        <parameter>
          <type>DskXml *</type>
          <name>to_parse</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>out</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>to_xml</name>
        <return-type>DskXml *</return-type>
        <parameter>
          <type>DskXmlBindingType *</type>
          <name>type</name>
        </parameter>
        <parameter>
          <type>const void *</type>
          <name>data</name>
        </parameter>
        <parameter>
          <type>DskError **</type>
          <name>error</name>
        </parameter>
      </method>
      <method>
        <name>clear</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskXmlBindingType *</type>
          <name>type</name>
        </parameter>
        <parameter>
          <type>void *</type>
          <name>out</name>
        </parameter>
      </method>
      <method>
        <name>finalize_type</name>
        <return-type>void</return-type>
        <parameter>
          <type>DskXmlBindingType *</type>
          <name>unnamed0</name>
        </parameter>
      </method>
    </structure>
    <structure>
      <name>DskXmlBindingNamespace</name>
      <member>
        <name>is_static</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>name</name>
        <type>char *</type>
      </member>
      <member>
        <name>n_types</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>types</name>
        <type>DskXmlBindingType **</type>
      </member>
      <member>
        <name>ref_count</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>types_sorted_by_name</name>
        <type>unsigned *</type>
      </member>
    </structure>
    <function>
      <name>dsk_xml_binding_namespace_new</name>
      <return-type>DskXmlBindingNamespace *</return-type>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_namespace_unref</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXmlBindingNamespace *</type>
        <name>ns</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_new</name>
      <return-type>DskXmlBinding *</return-type>
    </function>
    <function>
      <name>dsk_xml_binding_add_searchpath</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXmlBinding *</type>
        <name>binding</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>path</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>ns_separator</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_get_ns</name>
      <return-type>DskXmlBindingNamespace *</return-type>
      <parameter>
        <type>DskXmlBinding *</type>
        <name>binding</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_try_ns</name>
      <return-type>DskXmlBindingNamespace *</return-type>
      <parameter>
        <type>DskXmlBinding *</type>
        <name>binding</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_namespace_lookup</name>
      <return-type>DskXmlBindingType *</return-type>
      <parameter>
        <type>DskXmlBindingNamespace *</type>
        <name>unnamed0</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_free</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXmlBinding *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <structure>
      <name>DskXmlBindingStructMember</name>
      <member>
        <name>quantity</name>
        <type>DskXmlBindingQuantity</type>
      </member>
      <member>
        <name>name</name>
        <type>char *</type>
      </member>
      <member>
        <name>type</name>
        <type>DskXmlBindingType *</type>
      </member>
      <member>
        <name>quantifier_offset</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>offset</name>
        <type>unsigned</type>
      </member>
    </structure>
    <structure>
      <name>DskXmlBindingTypeStruct</name>
      <member>
        <name>base_type</name>
        <type>DskXmlBindingType</type>
      </member>
      <member>
        <name>n_members</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>members</name>
        <type>DskXmlBindingStructMember *</type>
      </member>
      <member>
        <name>members_sorted_by_name</name>
        <type>unsigned *</type>
      </member>
    </structure>
    <function>
      <name>dsk_xml_binding_type_struct_new</name>
      <return-type>DskXmlBindingTypeStruct *</return-type>
      <parameter>
        <type>DskXmlBindingNamespace *</type>
        <name>ns</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>struct_name</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_members</name>
      </parameter>
      <parameter>
        <type>const DskXmlBindingStructMember *</type>
        <name>members</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_type_struct_lookup_member</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskXmlBindingTypeStruct *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <structure>
      <name>DskXmlBindingUnionCase</name>
      <member>
        <name>name</name>
        <type>char *</type>
      </member>
      <member>
        <name>elide_struct_outer_tag</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>type</name>
        <type>DskXmlBindingType *</type>
      </member>
    </structure>
    <structure>
      <name>DskXmlBindingTypeUnion</name>
      <member>
        <name>base_type</name>
        <type>DskXmlBindingType</type>
      </member>
      <member>
        <name>variant_offset</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>n_cases</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>cases</name>
        <type>DskXmlBindingUnionCase *</type>
      </member>
      <member>
        <name>cases_sorted_by_name</name>
        <type>unsigned *</type>
      </member>
    </structure>
    <function>
      <name>dsk_xml_binding_type_union_new</name>
      <return-type>DskXmlBindingTypeUnion *</return-type>
      <parameter>
        <type>DskXmlBindingNamespace *</type>
        <name>ns</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>union_name</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_cases</name>
      </parameter>
      <parameter>
        <type>const DskXmlBindingUnionCase *</type>
        <name>cases</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_type_union_lookup_case</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskXmlBindingTypeUnion *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_type_union_lookup_case_by_tag</name>
      <return-type>int</return-type>
      <parameter>
        <type>DskXmlBindingTypeUnion *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>DskXmlBindingTypeUnionTag</type>
        <name>tag</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_type_ref</name>
      <return-type>DskXmlBindingType *</return-type>
      <parameter>
        <type>DskXmlBindingType *</type>
        <name>type</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_type_unref</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXmlBindingType *</type>
        <name>type</name>
      </parameter>
    </function>
    <global>
      <type>extern</type>
      <name>DskXmlBindingType</name>
    </global>
    <global>
      <type>extern</type>
      <name>DskXmlBindingNamespace</name>
    </global>
    <function>
      <name>dsk_xml_binding_struct_parse</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskXmlBindingType *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>DskXml *</type>
        <name>to_parse</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_struct_to_xml</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>DskXmlBindingType *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_struct_clear</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXmlBindingType *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_union_parse</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskXmlBindingType *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>DskXml *</type>
        <name>to_parse</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_union_to_xml</name>
      <return-type>DskXml *</return-type>
      <parameter>
        <type>DskXmlBindingType *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_xml_binding_union_clear</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskXmlBindingType *</type>
        <name>type</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>out</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-http-auth.h</h-filename>
    <title>dsk-http-auth.h</title>
    <function>
      <name>dsk_http_auth_basic_get_length</name>
      <return-type>unsigned</return-type>
      <parameter>
        <type>const char *</type>
        <name>username</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>password</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_auth_basic_encode</name>
      <return-type>void</return-type>
      <parameter>
        <type>const char *</type>
        <name>username</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>password</name>
      </parameter>
      <parameter>
        <type>char *</type>
        <name>encoded_data</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_auth_digest_new</name>
      <return-type>DskHttpAuthDigest *</return-type>
      <parameter>
        <type>char **</type>
        <name>kv_pairs</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_http_auth_digest_set_userpass</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskHttpAuthDigest *</type>
        <name>digest</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>username</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>password</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-udp-socket.h</h-filename>
    <title>dsk-udp-socket.h</title>
    <structure>
      <name>DskUdpSocketClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskUdpSocket</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>readable</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>writable</name>
        <type>DskHook</type>
      </member>
      <member>
        <name>is_bound</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>is_connected</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>is_ipv6</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>fd</name>
        <type>DskFileDescriptor</type>
      </member>
      <member>
        <name>bound_address</name>
        <type>DskIpAddress</type>
      </member>
      <member>
        <name>connect_address</name>
        <type>DskIpAddress</type>
      </member>
      <member>
        <name>recv_slab</name>
        <type>uint8_t *</type>
      </member>
      <member>
        <name>recv_slab_len</name>
        <type>unsigned</type>
      </member>
    </structure>
    <function>
      <name>dsk_udp_socket_new</name>
      <return-type>DskUdpSocket *</return-type>
      <parameter>
        <type>dsk_boolean</type>
        <name>is_ipv6</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_udp_socket_send</name>
      <return-type>DskIOResult</return-type>
      <parameter>
        <type>DskUdpSocket *</type>
        <name>socket</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_udp_socket_send_to</name>
      <return-type>DskIOResult</return-type>
      <parameter>
        <type>DskUdpSocket *</type>
        <name>socket</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>port</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_udp_socket_send_to_ip</name>
      <return-type>DskIOResult</return-type>
      <parameter>
        <type>DskUdpSocket *</type>
        <name>socket</name>
      </parameter>
      <parameter>
        <type>const DskIpAddress *</type>
        <name>addr</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>port</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>data</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_udp_socket_bind</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskUdpSocket *</type>
        <name>socket</name>
      </parameter>
      <parameter>
        <type>DskIpAddress *</type>
        <name>bind_addr</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>port</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_udp_socket_receive</name>
      <return-type>DskIOResult</return-type>
      <parameter>
        <type>DskUdpSocket *</type>
        <name>socket</name>
      </parameter>
      <parameter>
        <type>DskIpAddress *</type>
        <name>addr_out</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>port_out</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>len_out</name>
      </parameter>
      <parameter>
        <type>uint8_t **</type>
        <name>data_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-error.h</h-filename>
    <title>dsk-error.h</title>
    <structure>
      <name>DskErrorClass</name>
      <member>
        <name>base_class</name>
        <type>DskObjectClass</type>
      </member>
    </structure>
    <structure>
      <name>DskError</name>
      <member>
        <name>base_instance</name>
        <type>DskObject</type>
      </member>
      <member>
        <name>message</name>
        <type>char *</type>
      </member>
    </structure>
    <global>
      <type>extern</type>
      <name>DskErrorClass</name>
    </global>
    <function>
      <name>dsk_error_new</name>
      <return-type>DskError *</return-type>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_error_new_valist</name>
      <return-type>DskError *</return-type>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>va_list</type>
        <name>args</name>
      </parameter>
    </function>
    <function>
      <name>dsk_error_new_literal</name>
      <return-type>DskError *</return-type>
      <parameter>
        <type>const char *</type>
        <name>message</name>
      </parameter>
    </function>
    <function>
      <name>dsk_set_error</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_add_error_prefix</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_add_error_suffix</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>format</name>
      </parameter>
      <parameter>
        <type>...</type>
        <name>...</name>
      </parameter>
    </function>
    <function>
      <name>dsk_error_ref</name>
      <return-type>DskError *</return-type>
      <parameter>
        <type>DskError *</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_error_unref</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskError *</type>
        <name>error</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-ip-address.h</h-filename>
    <title>dsk-ip-address.h</title>
    <enumeration>
      <name>DskIpAddressType</name>
      <value>
        <name>DSK_IP_ADDRESS_IPV4</name>
      </value>
      <value>
        <name>DSK_IP_ADDRESS_IPV6</name>
      </value>
    </enumeration>
    <structure>
      <name>DskIpAddress</name>
      <member>
        <name>type</name>
        <type>DskIpAddressType</type>
      </member>
      <member>
        <name>address</name>
        <type>uint8_t</type>
      </member>
    </structure>
    <function>
      <name>dsk_hostname_looks_numeric</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ip_address_parse_numeric</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>str</name>
      </parameter>
      <parameter>
        <type>DskIpAddress *</type>
        <name>out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ip_address_to_string</name>
      <return-type>char *</return-type>
      <parameter>
        <type>const DskIpAddress *</type>
        <name>unnamed0</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ip_addresses_equal</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const DskIpAddress *</type>
        <name>a</name>
      </parameter>
      <parameter>
        <type>const DskIpAddress *</type>
        <name>b</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ip_address_to_sockaddr</name>
      <return-type>void</return-type>
      <parameter>
        <type>const DskIpAddress *</type>
        <name>address</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>port</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>out_len</name>
      </parameter>
    </function>
    <function>
      <name>dsk_sockaddr_to_ip_address</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>unsigned</type>
        <name>addr_len</name>
      </parameter>
      <parameter>
        <type>const void *</type>
        <name>addr</name>
      </parameter>
      <parameter>
        <type>DskIpAddress *</type>
        <name>out</name>
      </parameter>
      <parameter>
        <type>unsigned *</type>
        <name>port_out</name>
      </parameter>
    </function>
    <function>
      <name>dsk_ip_address_localhost</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskIpAddress *</type>
        <name>out</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-octet-listener-socket.h</h-filename>
    <title>dsk-octet-listener-socket.h</title>
    <structure>
      <name>DskOctetListenerSocketClass</name>
      <member>
        <name>base_class</name>
        <type>DskOctetListenerClass</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetListenerSocket</name>
      <member>
        <name>base_instance</name>
        <type>DskOctetListener</type>
      </member>
      <member>
        <name>is_local</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>path</name>
        <type>char *</type>
      </member>
      <member>
        <name>bind_address</name>
        <type>DskIpAddress</type>
      </member>
      <member>
        <name>bind_port</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>bind_iface</name>
        <type>char *</type>
      </member>
      <member>
        <name>listening_fd</name>
        <type>DskFileDescriptor</type>
      </member>
    </structure>
    <structure>
      <name>DskOctetListenerSocketOptions</name>
      <member>
        <name>is_local</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>local_path</name>
        <type>const char *</type>
      </member>
      <member>
        <name>bind_address</name>
        <type>DskIpAddress</type>
      </member>
      <member>
        <name>bind_port</name>
        <type>int</type>
      </member>
      <member>
        <name>bind_iface</name>
        <type>const char *</type>
      </member>
      <member>
        <name>max_pending_connections</name>
        <type>unsigned</type>
      </member>
    </structure>
    <function>
      <name>dsk_octet_listener_socket_new</name>
      <return-type>DskOctetListener *</return-type>
      <parameter>
        <type>const DskOctetListenerSocketOptions *</type>
        <name>options</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <global>
      <type>extern const</type>
      <name>DskOctetListenerSocketClass</name>
    </global>
  </section>
  <section>
    <h-filename>dsk-table-helper.h</h-filename>
    <title>dsk-table-helper.h</title>
    <function>
      <name>dsk_table_helper_openat</name>
      <return-type>int</return-type>
      <parameter>
        <type>const char *</type>
        <name>openat_dir</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>openat_fd</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>base_filename</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>suffix</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>open_flags</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>open_mode</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_helper_renameat</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>openat_dir</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>openat_fd</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>old_name</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>new_name</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_helper_unlinkat</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>openat_dir</name>
      </parameter>
      <parameter>
        <type>int</type>
        <name>openat_fd</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>to_delete</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_table_helper_pread</name>
      <return-type>int</return-type>
      <parameter>
        <type>int</type>
        <name>fd</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>buf</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>len</name>
      </parameter>
      <parameter>
        <type>off_t</type>
        <name>offset</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-cgi.h</h-filename>
    <title>dsk-cgi.h</title>
    <structure>
      <name>DskCgiVariable</name>
      <member>
        <name>is_get</name>
        <type>dsk_boolean</type>
      </member>
      <member>
        <name>key</name>
        <type>char *</type>
      </member>
      <member>
        <name>value_length</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>value</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_type</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_location</name>
        <type>char *</type>
      </member>
      <member>
        <name>content_description</name>
        <type>char *</type>
      </member>
    </structure>
    <function>
      <name>dsk_cgi_parse_query_string</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>query_string</name>
      </parameter>
      <parameter>
        <type>size_t *</type>
        <name>n_cgi_variables_out</name>
      </parameter>
      <parameter>
        <type>DskCgiVariable **</type>
        <name>cgi_variables_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cgi_parse_post_data</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>const char *</type>
        <name>content_type</name>
      </parameter>
      <parameter>
        <type>char **</type>
        <name>content_type_kv_pairs</name>
      </parameter>
      <parameter>
        <type>size_t</type>
        <name>post_data_length</name>
      </parameter>
      <parameter>
        <type>const uint8_t *</type>
        <name>post_data</name>
      </parameter>
      <parameter>
        <type>size_t *</type>
        <name>n_cgi_variables_out</name>
      </parameter>
      <parameter>
        <type>DskCgiVariable **</type>
        <name>cgi_variables_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_cgi_variable_clear</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskCgiVariable *</type>
        <name>variable</name>
      </parameter>
    </function>
  </section>
  <section>
    <h-filename>dsk-bz2lib.h</h-filename>
    <title>dsk-bz2lib.h</title>
    <function>
      <name>dsk_bz2lib_compressor_new</name>
      <return-type>DskOctetFilter *</return-type>
      <parameter>
        <type>unsigned</type>
        <name>level</name>
      </parameter>
    </function>
    <function>
      <name>dsk_bz2lib_decompressor_new</name>
      <return-type>DskOctetFilter *</return-type>
    </function>
  </section>
  <section>
    <h-filename>dsk-zlang.h</h-filename>
    <title>dsk-zlang.h</title>
    <enumeration>
      <name>DskZLangType</name>
      <value>
        <name>DSK_ZLANG_INSN_FUNCTION</name>
      </value>
      <value>
        <name>DSK_ZLANG_TYPE_UNICODE</name>
      </value>
      <value>
        <name>DSK_ZLANG_TYPE_CATCH</name>
      </value>
      <value>
        <name>DSK_ZLANG_TYPE_STRING</name>
      </value>
      <value>
        <name>DSK_ZLANG_TYPE_CODE_POINTER</name>
      </value>
      <value>
        <name>DSK_ZLANG_TYPE_NUMBER</name>
      </value>
    </enumeration>
    <function-typedef>
      <name>DskZLangHandler</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskZLangStack *</type>
        <name>stack</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>handler_data</name>
      </parameter>
    </function-typedef>
    <function-typedef>
      <name>DskZLangCaseFunc</name>
      <return-type>DskZLangInsn</return-type>
      <parameter>
        <type>DskZLangStackNode *</type>
        <name>test_val</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>case_data</name>
      </parameter>
    </function-typedef>
    <structure>
      <name>DskZLangStackNode</name>
      <member>
        <name>type</name>
        <type>DskZLangType</type>
      </member>
    </structure>
    <structure>
      <name>DskZLangStack</name>
      <member>
        <name>stack_size</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>stack_alloced</name>
        <type>unsigned</type>
      </member>
      <member>
        <name>stack</name>
        <type>DskZLangStackNode *</type>
      </member>
    </structure>
    <enumeration>
      <name>DskZLangInsnType</name>
      <value>
        <name>DSK_ZLANG_INSN_JUMP</name>
      </value>
      <value>
        <name>DSK_ZLANG_INSN_CALL</name>
      </value>
      <value>
        <name>DSK_ZLANG_INSN_CASE</name>
      </value>
      <value>
        <name>DSK_ZLANG_INSN_PUSH</name>
      </value>
      <value>
        <name>DSK_ZLANG_INSN_POP</name>
      </value>
      <value>
        <name>DSK_ZLANG_INSN_DUP</name>
      </value>
    </enumeration>
    <structure>
      <name>DskZLangInsn</name>
      <member>
        <name>type</name>
        <type>DskZLangInsnType</type>
      </member>
    </structure>
    <structure>
      <name>DskZLangFunction</name>
      <member>
        <name>n_args</name>
        <type>int</type>
      </member>
      <member>
        <name>handler</name>
        <type>DskZLangHandler</type>
      </member>
      <member>
        <name>handler_data</name>
        <type>void *</type>
      </member>
      <member>
        <name>destroy</name>
        <type>DskDestroyNotify</type>
      </member>
      <member>
        <name>ref_count</name>
        <type>unsigned</type>
      </member>
    </structure>
    <function>
      <name>dsk_zlang_function_new_c</name>
      <return-type>DskZLangFunction *</return-type>
      <parameter>
        <type>int</type>
        <name>n_args</name>
      </parameter>
      <parameter>
        <type>DskZLangHandler</type>
        <name>handler</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>handler_data</name>
      </parameter>
      <parameter>
        <type>DskDestroyNotify</type>
        <name>destroy</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_function_new</name>
      <return-type>DskZLangFunction *</return-type>
      <parameter>
        <type>int</type>
        <name>n_args</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>n_insn</name>
      </parameter>
      <parameter>
        <type>DskZLangInsn *</type>
        <name>insn</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_stack_push</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskZLangStack *</type>
        <name>stack</name>
      </parameter>
      <parameter>
        <type>DskZLangStackNode *</type>
        <name>node</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_stack_pop</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskZLangStack *</type>
        <name>stack</name>
      </parameter>
      <parameter>
        <type>unsigned</type>
        <name>count</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_context_new</name>
      <return-type>DskZLangContext *</return-type>
    </function>
    <function>
      <name>dsk_zlang_context_parse_file</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskZLangContext *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>filename</name>
      </parameter>
      <parameter>
        <type>DskZLangInsn **</type>
        <name>main_out</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_context_register</name>
      <return-type>dsk_boolean</return-type>
      <parameter>
        <type>DskZLangContext *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>const char *</type>
        <name>name</name>
      </parameter>
      <parameter>
        <type>DskZLangFunction *</type>
        <name>function</name>
      </parameter>
      <parameter>
        <type>DskError **</type>
        <name>error</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_stack_new</name>
      <return-type>DskZLangStack *</return-type>
      <parameter>
        <type>DskZLangContext *</type>
        <name>context</name>
      </parameter>
      <parameter>
        <type>DskZLangHandler</type>
        <name>handler</name>
      </parameter>
      <parameter>
        <type>DskZLangHandler</type>
        <name>exception</name>
      </parameter>
      <parameter>
        <type>void *</type>
        <name>handler_data</name>
      </parameter>
      <parameter>
        <type>DskDestroyNotify</type>
        <name>destroy</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_stack_run</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskZLangStack *</type>
        <name>stack</name>
      </parameter>
      <parameter>
        <type>DskZLangInsn *</type>
        <name>insn</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_handler_return</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskZLangStack *</type>
        <name>stack</name>
      </parameter>
    </function>
    <function>
      <name>dsk_zlang_handler_throw</name>
      <return-type>void</return-type>
      <parameter>
        <type>DskZLangStack *</type>
        <name>stack</name>
      </parameter>
      <parameter>
        <type>DskZLangStackNode *</type>
        <name>exception</name>
      </parameter>
    </function>
  </section>
</template>
