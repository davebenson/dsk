STUDY:
_ HTTP server access log (hook)
_ file rotation service

_ out-of-fds should be fatal

cmdline:
_ wrapper programs where the first non-hyphen-prefixed argument stops processing
x mode-based programs:
  x modes may be wrappers
  x modes may have submodes, etc

STEAL:
_ glib's timezone code

TIMERS:
_ add boolean in DskDispatchTimer for whether it's keyed off
  wall-clock time (for absolute time timers)
  or unsettable timer (for relative timers)

_ Get-If-Modified Server support 
  _ On serving a file:
    _ include modification time header (is that a Date header??)
    _ Obey If-Modified-Since header (with a flag to suppress?)
  _ A simple flag for non-file data

_ content_type_kv_pairs
  _ in request-parser
  _ in response-parser
  _ in request_new
  _ in response_new
  _ in request_init_options

_ Range-support in HTTP (client & server)

_ HTTP Client implementation (search for TODO in dsk-http-client.h)
_ client support for receiving trailers (and server too, on principle)
_ remove DskObjectWeakPointer ?
_ Authentication support in DskHttpServer.
  _ support for HTTP auth
  _ support for Cookie-based auth
_ Authentication support in DskHttpClient.
_ Cookie support in DskHttpClient
_ dsk_utf16_to_utf8_converter_new
_ remove persistency support from DskClientStream !?!
_ dsk_buffer_transfer, dsk_buffer_drain: consolidate fragments
  if they are both small.
_ figure out a way to tune buffer allocations
  (perhaps a way to build to write a behavior log?)
_ Is the post_data hack of dsk_http_server_stream_respond() really ok?
_ Review dsk-dispatch API... has_idle and has_timeout are clearly bogus...
  implement epoll support.
_ Date:
  _ dsk_date_print_rfc850()
  _ dsk_date_print_iso8601()
_ HTTP Header Work:
  _ "no_cache" response:
    HTTP/1.1:
      Cache-Control: no-store, no-cache, must-revalidate
      Cache-Control: post-check=0, pre-check=0
    HTTP/1.0:
      Pragma: no-cache

x fix dsk_utf8_skip_whitespace()
_ other utf8 functions
  _ strdown? strup?
  _ diacritical normalization


TESTS:
_ request header parsing
_ response header parsing
_ CGI parsing
  x GET variable style
  _ MIME Multipart (POST) style
  x MIME URL-Encoder GET-string style
_ MIME Multipart Decoder
  x stole simple test from GSK
  _ want base-64 and quoted-printable tests
  _ tests for all supported headers
_ MIME Multipart Encoder
x http client stream: connection-close
x http client stream: content-length POST data, connection-close
x http client stream: transfer-encoding chunked POST data
x http client stream: transfer-encoding chunked content data
x http client stream: keepalive (GET,POST,content-length,chunked)
x http client stream: oddballs
  x transfer-encoding chunk extensions
  x transfer-encoding chunk trailer
  x multiline header lines (w/ indent)
  x "Continue" header
x http client stream: HEAD requests
_ http client stream: error conditions:
  x extra blank space at front of request [ignored blank space]
  x bad response code
  x bad transfer-encoding chunked format
  x bad gzip data
    x content-stream should have a way to enqueue an error
      (needs to be in DskMemorySource)
  x random data tests
  _ transport errors reading/writing
    x read errors
    _ write errors
  _ post-data stream read errors
  _ more responses than requests
_ http client: request instead of request_options testing
  _ modify http-client test to be two-pass
  _ test error conditions
  _ audit that we don't use assert inappropriately
_ http client gzip content-encoding:
  x POST data, pre-gzipped, with size
  x POST data, pre-gzipped, with chunked
  _ POST data, streaming, with chunked
  _ POST data, data in slab with size
    (gzip and provide content-length=compressed-size)
  x body, with size
  x body, streaming
  _ body, without auto-decompression
x http server stream: content-length POST data
x http server stream: transfer-encoding-chunked POST data
x http server stream: transfer-encoding-chunked content
_ http server stream: transfer-encoding-chunked trailer
_ http server stream: transfer-encoding-chunked extensions
x http server stream: pipelining
_ http server stream: HEAD requests
_ http server stream: error conditions:
  _ extra blank space at front of request
  _ bad transfer-encoding chunked format
  _ bad gzip data
  _ random data tests
  _ transport errors reading/writing
  _ post-data stream read errors
  _ unknown Transfer-Encodings; other bogus critical headers (Content-Length)
_ tie http-server and client together with pipes
  X simple GET / close connection
  _ simple HEAD / close connection
  _ simple POST / close connection
  _ import 'test_keepalive' (from tests/test-http-client-stream-0)
x date parsing (each of the three formats)
x date printing RFC-822
x converting unixtime <=> DskDate 
x XML Parser: basics
x XML Parser: big documents
x XML Parser: error conditions
x XML Parser: comments
_ audit/test: i recall that any http verb may include a content-body
  from the client -> server, even GET.
   (1) do we handle that correctly?
        - including checking if post_data==NULL for a POST or PUT?
   (2) what does the CGI spec say about this?
_ http server
  x CGI Get-style
  _ CGI POST multipart
  _ CGI POST URL-Encoded-GET
  _ streaming POST data (TODO: needs design work)
  x internal redirect
  _ internal redirect with POST data
  _ internal redirect with changing GET params
  _ "pass" - ie find find next match
  _ "serve-file" support
  _ (broken) MD5Sum of POST data
    _ in header
    _ in trailer
  _ max POST size limit
  _ max header size limit
_ http client
  _ keepalive pool
  _ POST
  _ POST multipart CGI
  _ POST URL-Encoded-GET
  _ streaming content (from server)
  _ in-memory/on-disk content (from server) based on data-size
  _ max data size limits
_ JSON implementation
  x parser
  x printer
    x dense
    x pretty
    _ dsk-json-format (program)
  x dsk_json_object_get_member()
_ UTF-8 tests
  _ encode char
  _ decode char
  _ utf8_skip_whitespace
_ Websocket support:
  _ compute_response
  _ client-stream support
    - connection made, but no packets sent
  x server-stream support
  _ server support
_ DskDir test code

_ make XML parser:
  _ obey xml:whitespace="preserve" (in SUPPRESS_WHITESPACE mode)
  _ add CONDENSE_WHITESPACE mode that elides preceding and trailing whitespace,
    and condenses all runs of whitespace into a single space character.
    (CONDENSE_WHITESPACE performs a superset of SUPPRESS_WHITESPACE,
    and so, adding both is redundant; maybe WHITESPACE_HANDLING_PRESERVE,
    WHITESPACE_HANDLING_SUPPRESS, WHITESPACE_HANDLING_CONDENSE is needed)

_ SPDY protocol as an HTTP-like layer

_ websocket support
  _ test computing response hash (in spec)
  _ http-server-stream
  _ http-client-stream

_ XML Parser: ignore doctype and processing-instructions
x XML Parser: multiple return paths
x XML Parser: namespace support
_ XML Parser: parse errors
_ XML Parser: strip whitespace (not implemented yet) 
x XML Parser: search for existing conformance test
_ XML Parser: XML conformance test: suck up entities included
_ octet-filter test harness [feed data in several ways]
  x c-quote test
  x hex test
  x base64 test
  x XML escape
  . XML unescape
  x url-encode test
  _ byte doubler test
  _ quoted-printable test
  _ zlib test
_ dsk_octet_filter_source()
_ more checksum tests

WARNING CONDITIONS:
_ high trap counts?


_ HTTP Server Stream implementation
  _ content-encoding gzip
    _ POST data, with size
    _ POST data, with chunked
    _ POST data, without auto-decompression
    _ body, pre-gzipped, with size
    _ body, pre-gzipped, with chunked
    _ body, streaming, with chunked
    _ body, data in slab with size
      (gzip and provide content-length=compressed-size)
_ HTTP Server implementation
_ MIME Multipart Encoder
_ XML implementation
  x xml node object
  x parser
  _ parser: suppress whitespace
  _ parser: UTF-16
  _ parser: other char encodings? iconv plugin?
  _ parser: parsing dtd headers:
    _ internal entities
    _ external entities (a config parameter?)
    _ validation?
    note: there should be a flag to disable/skip this
  _ printer / pretty-printer
_ dsk_octet_filter_sink()

_ SSL and HTTPS [see file TODO-SSL]

DOCUMENTATION
*everything needs docs, but just remind ourselves of subtle stuff*
_ pick a documentation standard
_ document XML binding language

CODING STANDARDS
"when in doubt, do NOT abbreviated"
_ DOCUMENT: length (not abbreviated)
_ size_t everywhere ?
_ s/octet/byte/ ?????
_ break apart dsk-octet-io.h
_ DskClientStreamSource BUT DskOctetStreamSourceFd.
  Fix this inconsistency and come up with a policy for naming derived classes
_ note that we use TYPE_INIT everywhere now instead of TYPE_DEFAULT 
  (and dropping STATIC from the name of the macro DSK_BUFFER_STATIC_INIT)

SEE ALSO: DskTable-TODO
